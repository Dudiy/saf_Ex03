Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/06/17 18:28:09
ex							     Page 1 - 1


				; file: ex3.asm
				; Dudi Yecheskel , ID 200441749

				TITLE ex3
				; This program simulates a board game as described in the instructions

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE ex3_data.inc
			      C ; file: ex2.asm
			      C ; Dudi Yecheskel , ID 200441749
			      C 
 00000000		      C .data
 00000000 04		      C 	numrows	BYTE 4
 00000001 04		      C 	numcols BYTE 4
 00000002 03 17 0E 53 13      C 	board	BYTE 3, 23, 14, 'S',
	   53 45 0C 09 53
	   21 11 01 0A 45
	   05
			      C 				 19, 'S', 'E', 12,
			      C 				 9, 'S', 33, 17,
			      C 				 1, 10, 'E', 5	
 00000012 05 05 04 02 3B      C 	moves BYTE 5, 5, 4, 2, ';'
 00000017 05		      C 	nomoves BYTE 5
			      C 

 00000018			.data
 00000018 44 75 64 69 20		myName BYTE "Dudi Yecheskel  ID:200441749  EX2",10,0
	   59 65 63 68 65
	   73 6B 65 6C 20
	   20 49 44 3A 32
	   30 30 34 34 31
	   37 34 39 20 20
	   45 58 32 0A 00
 0000003B 67 61 6D 65 46		gameFinStr BYTE "gameFin: " , 0
	   69 6E 3A 20 00
 00000045 00				gamefin BYTE 0									;init to 0 - will change to 1 only if the player wins
 00000046 73 63 6F 72 65		scoreStr BYTE "score: " , 0
	   3A 20 00
 0000004E 00000000			score DWORD 0									;sum of cell values if player wins or error identifier if player looses
 00000052 6D 6F 76 65 4E		moveNumStr BYTE "moveNum: ", 0
	   75 6D 3A 20 00
					;moveNum WORD 0									;the number of moves made before the game ended
 0000005C  00000010 [			rearrangedBoard BYTE LENGTHOF board DUP(?)		;a copy of the given board, rearanged by stepping order
	    00
	   ]
 0000006C 00				currRow BYTE 0									;the current row being copied
 0000006D 00000000			lastCellOnBoard DWORD ?							;the address of the last cell on the board
					;moveseries SBYTE 5, 5, 1, ';'	; TODO: Important change to nomoves somehow
 00000071  0000000A [			moveseries SBYTE 10 DUP(?)	; TODO: Important change to nomoves somehow
	    00
	   ]
 = 00000001				MIN_DIGIT = 1
 = 00000028				MAX_DIGIT = 40
 00000000			.code

 00000000			myMain PROC
					;Print my name
 00000000  BA 00000018 R		mov edx, OFFSET myName
 00000005  E8 00000000 E		call writestring

 0000000A  68 00000002 R		push OFFSET board
 0000000F  0F B6 05			movzx eax, numrows
	   00000000 R
 00000016  50				push eax
 00000017  0F B6 05			movzx eax, numcols
	   00000001 R
 0000001E  50				push eax
 0000001F  E8 00000151			call checkboard
 00000024  83 F8 FF			cmp eax, -1
 00000027  74 4B			je invalidBoard
 00000029  E8 000000AA			call copyAndRearangeBoard	
					

					; findshortseries(moveSeriesPtr, nomoves, rearrangedBoardPtr, numRows, numCols)
 0000002E  68 00000071 R		push OFFSET moveseries
 00000033  0F BE 05			movsx eax, nomoves
	   00000017 R
 0000003A  50				push eax
 0000003B  68 0000005C R		push OFFSET rearrangedBoard
 00000040  0F BE 05			movsx eax, numrows
	   00000000 R
 00000047  50				push eax
 00000048  0F B6 05			movzx eax, numcols
	   00000001 R
 0000004F  50				push eax
 00000050  E8 0000025C			call findshortseries

 00000055  68 00000071 R		push OFFSET moveseries
 0000005A  68 0000005C R		push OFFSET rearrangedBoard
 0000005F  0F BE 05			movsx eax, numrows
	   00000000 R
 00000066  50				push eax
 00000067  0F B6 05			movzx eax, numcols
	   00000001 R
 0000006E  50				push eax
 0000006F  E8 0000030F			call writescore

 00000074				invalidBoard:
 00000074  C7 05 0000004E R			mov score, -1
	   FFFFFFFF
 0000007E  C6 05 00000071 R			mov moveseries, -1
	   FF

					;============================================ end of game - print results ============================================
 00000085				gameEnded:
						;print gameFin
 00000085  BA 0000003B R			mov edx, OFFSET gameFinStr
 0000008A  E8 00000000 E			call writeString
 0000008F  0F BE 05				movsx eax, gamefin
	   00000045 R
 00000096  E8 00000000 E			call writedec
 0000009B  E8 00000000 E			call CRLF
						
						;print score
 000000A0  BA 00000046 R			mov edx, OFFSET scoreStr
 000000A5  E8 00000000 E			call writeString
 000000AA  A1 0000004E R			mov eax, score
 000000AF  E8 00000000 E			call writedec
 000000B4  E8 00000000 E			call CRLF

						;print moveNum
 000000B9  BA 00000052 R			mov edx, OFFSET moveNumStr
 000000BE  E8 00000000 E			call writeString
 000000C3  0F BE 45 FC				movsx eax, byte PTR [ebp + moveNum]
 000000C7  E8 00000000 E			call writedec
 000000CC  E8 00000000 E			call CRLF

						exit
 000000D1  6A 00	   *	    push   +000000000h
 000000D3  E8 00000000 E   *	    call   ExitProcess
 000000D8			myMain ENDP

 000000D8			copyAndRearangeBoard PROC	
 000000D8  60				PUSHAD	
 000000D9  BE 00000002 R		mov esi, OFFSET board
 000000DE  BF 0000005C R		mov edi, OFFSET rearrangedBoard

					;set esi to the bottom left cell
					;add esi, SIZEOF board	
					;movsx ebx, BYTE PTR numCols			;if we want this to be generic we can multiply this value by 'TYPE board' (here its 1 so there is no need)
					;sub esi, ebx

 000000E3  68 00000002 R		push OFFSET board
 000000E8  0F B6 05			movzx eax, numrows
	   00000000 R
 000000EF  50				push eax
 000000F0  0F B6 05			movzx eax, numcols
	   00000001 R
 000000F7  50				push eax
 000000F8  E8 000000ED			call moveEsiToBottomLeft

					;main loop - each itteration copies a single row from board to rearrangedBoard
 000000FD				nextRow:
						;compare curr to board, if curr < board then finished copying
						; (*) it doesn't matter if the last row is even or odd, in both cases the first cell is not less than 'OFFSET board'
 000000FD  81 FE 00000002 R			cmp esi, OFFSET board
 00000103  7C 5E				jl endOfCopy

						;check parity 
 00000105  0F BE 05				movsx eax, currRow
	   0000006C R
 0000010C  83 E0 01				and eax, 1
 0000010F  83 F8 01				cmp eax, 1			;(eax = 1 => odd row number)
 00000112  74 02				je copyOddRow
 00000114  75 2B				jne copyEvenRow

 00000116				copyOddRow:
						;jump to the end of the row to copy backwards
 00000116  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 0000011D  03 F0				add esi, eax
 0000011F  4E					dec esi

 00000120  0F BE 0D				movsx ecx, BYTE PTR numCols
	   00000001 R
						; cells are copied one by one because we don't know in advance the value of numCols
 00000127					copyCell1:
 00000127  8A 06					mov al, BYTE PTR [esi]
 00000129  88 07					mov [edi], al
 0000012B  47						inc edi
 0000012C  4E						dec esi
 0000012D  E2 F8					loop copyCell1

						;set esi to the beginning of the row above
 0000012F  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 00000136  2B F0				sub esi, eax
 00000138  46					inc esi
 00000139  FE 05 0000006C R			inc currRow
 0000013F  EB BC				jmp nextRow

 00000141				copyEvenRow:
 00000141  0F BE 0D				movsx ecx, BYTE PTR numCols
	   00000001 R
 00000148					copyCell2:
 00000148  8A 06					mov al, BYTE PTR [esi]
 0000014A  88 07					mov [edi], al
 0000014C  47						inc edi
 0000014D  46						inc esi
 0000014E  E2 F8					loop copyCell2

						;set esi to the beginning of the row above
 00000150  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 00000157  2B F0				sub esi, eax
 00000159  2B F0				sub esi, eax
 0000015B  FE 05 0000006C R			inc currRow
 00000161  EB 9A				jmp nextRow

 00000163				endOfCopy:
						;set lastCellOnBoard to be the address of the last cell
 00000163  B8 0000005C R			mov eax, OFFSET rearrangedBoard
 00000168  83 C0 10				add eax, SIZEOF rearrangedBoard
 0000016B  83 E8 01				sub eax, TYPE rearrangedBoard
 0000016E  A3 0000006D R			mov lastCellOnBoard, eax
					
 00000173  61				POPAD
 00000174  C3				ret
 00000175			copyAndRearangeBoard ENDP

				; original board is transfered, board is checked from last row to the first
 00000175			checkboard PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_BoardPtr = i_NumRows + 4
					
 00000175  55				push ebp
 00000176  8B EC			mov ebp, esp
 00000178  56				push esi
 00000179  53				push ebx
 0000017A  51				push ecx
 0000017B  52				push edx

					;set eax to 1 , will be changed to -1 if the board is invalid
 0000017C  B8 00000000			mov eax, 0
 00000181  8B 75 10			mov esi, [ebp + i_BoardPtr]
 00000184  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 00000187				checkRows:
 00000187  8B D9				mov ebx, ecx
 00000189  8B 4D 08				mov ecx, [ebp + i_NumCols]
 0000018C					checkCols:
 0000018C  80 3E 53					cmp [esi], byte PTR 'S'
							;if 'S' check cell under
 0000018F  75 0B					jne notS							
 00000191  8B 55 08					mov edx, [ebp + i_NumCols]
							;if equal then there is E under S
 00000194  80 3C 32 45					cmp [esi + edx], byte PTR 'E'		
 00000198  74 41					je invalidBoard
 0000019A  EB 0F					jmp nextCol

 0000019C						notS:
							;if 'E' there can't be S above (we are checking from top to bottom)
 0000019C  80 3E 45					cmp [esi], byte PTR 'E'				
 0000019F  74 0A					je nextCol

							;not 'S' or 'E' so must be a digit between 1 and 40
 000001A1  80 3E 01					cmp [esi], byte PTR MIN_DIGIT
 000001A4  7C 35					jl invalidBoard

 000001A6  80 3E 28					cmp [esi], byte PTR MAX_DIGIT
 000001A9  7F 30					jg invalidBoard

 000001AB						nextCol:
 000001AB  46							inc esi
 000001AC  E2 DE						LOOP checkCols
 000001AE  8B CB				mov ecx, ebx
 000001B0  E2 D5				LOOP checkRows

					;check if there is an 'E' on the top row
 000001B2  8B 75 10			mov esi, [ebp + i_BoardPtr]
 000001B5  8B 4D 08			mov ecx, [ebp + i_NumCols]
 000001B8				checkLastRowForE:
 000001B8  80 3E 45				cmp [esi], byte PTR 'E'
 000001BB  74 1E				je invalidBoard
 000001BD  46					inc	esi
 000001BE  E2 F8				LOOP checkLastRowForE

					;check if there us an 'S' on the bottom row
					;get to bottom left cell	
 000001C0  FF 75 10			push [ebp + i_BoardPtr]
 000001C3  FF 75 0C			push [ebp + i_NumRows]
 000001C6  FF 75 08			push [ebp + i_NumCols]
 000001C9  E8 0000001C			call moveEsiToBottomLeft

 000001CE				checkFirstRowForS:
						;loop trough cells of first row
 000001CE  8B 4D 08				mov ecx, [ebp + i_NumCols]
 000001D1					lp2:
 000001D1  80 3E 53					cmp [esi], byte PTR 'S'
 000001D4  74 05					je invalidBoard
 000001D6  46						inc esi
 000001D7  E2 F8					LOOP lp2

					; if passed all checks, jump to end of procedure
 000001D9  EB 05			jmp endOfProc
					
					; if at any point an invalid cell value is found, will jump to here
 000001DB				invalidBoard:
 000001DB  B8 FFFFFFFF				mov eax, -1

 000001E0				endOfProc:
 000001E0  5A					pop edx
 000001E1  59					pop ecx
 000001E2  5B					pop ebx
 000001E3  5E					pop esi
 000001E4  8B E5				mov esp, ebp
 000001E6  5D					pop ebp
 000001E7  C2 000C				ret 12
 000001EA			checkboard ENDP

				; set ESI to point at the bottom left cell of the given board
				; parameters (boardPtr, numRows, numCols)
 000001EA			moveEsiToBottomLeft PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_BoardPtr = i_NumRows + 4

 000001EA  55				push ebp
 000001EB  8B EC			mov ebp, esp
 000001ED  51				push ecx

 000001EE  8B 75 10			mov esi, [ebp + i_BoardPtr]
 000001F1  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 000001F4  49				dec ecx
 000001F5				nextRow:
 000001F5  03 75 08				add esi, [ebp + i_NumCols]
 000001F8  E2 FB				LOOP nextRow
						
 000001FA  59				pop ecx
 000001FB  8B E5			mov esp, ebp
 000001FD  5D				pop ebp
 000001FE  C2 000C			ret 12
 00000201			moveEsiToBottomLeft ENDP

				; gets a pointer to a series of moves, and returns the next series
				; parameters (movesSeriesPtr, lengthOfSeries)
				; assumption: all values of the series are numbers between 1-6
 00000201			nextmove PROC
 = 00000008				i_lengthOfSeries = 8
 = 0000000C				i_MovesSeriesPtr = i_lengthOfSeries + 4

 00000201  55				push ebp
 00000202  8B EC			mov ebp, esp
 00000204  56				push esi
 00000205  51				push ecx
 00000206  53				push ebx

					; init EAX to 0, will be changed to 1 if series is 66...6
 00000207  B8 00000000			mov eax, 0
 0000020C  8B 75 0C			mov esi, [ebp + i_MovesSeriesPtr]
 0000020F  8B 5D 08			mov ebx, [ebp + i_lengthOfSeries]
 00000212  03 F3			add esi, ebx
 00000214				incPrev:
 00000214  4E					dec esi
 00000215  3B 75 0C				cmp esi, [ebp + i_MovesSeriesPtr]
 00000218  7C 0F				jl all6Series
 0000021A  80 3E 06				cmp [esi], byte PTR 6
 0000021D  7C 05				jl isLessThan6
 0000021F  C6 06 01				mov [esi], byte PTR 1
 00000222  E2 F0				LOOP incPrev
					
 00000224				isLessThan6:
 00000224  80 06 01				add [esi], byte PTR 1
 00000227  EB 07				jmp endProc

 00000229				all6Series:
 00000229  B8 00000001				mov eax, 1
 0000022E  EB 00				jmp endProc

 00000230				endProc:
 00000230  5B				pop ebx
 00000231  59				pop ecx
 00000232  5E				pop esi
 00000233  8B E5			mov esp, ebp
 00000235  5D				pop ebp
 00000236  C2 0008			ret 8
 00000239			nextmove ENDP

				; check if a given move series solves the board
				; parameters (moveSeriesPtr, rearrangedBoardPtr, numRows, numCols)
				; assumption: the board is valid and rearanged
 00000239			checksolved PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows =  i_NumCols + 4
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 = 00000014				i_MovesSeriesPtr = i_RearrangedBoardPtr + 4

 =-00000004				moveNum = - 4
 =-00000008				currentScore = moveNum - 4

 00000239  55				push ebp
 0000023A  8B EC			mov ebp, esp
					; init moveNum and score to 0
 0000023C  6A 00			push 0
 0000023E  6A 00			push 0
 00000240  56				push esi
 00000241  53				push ebx
 00000242  51				push ecx

					;============================================ start making moves on the board ============================================
					;initialize the game
 00000243  8B 75 10			mov esi, [ebp + i_RearrangedBoardPtr]

 00000246				makeMove:
 00000246  8B 5D 14				mov ebx, [ebp + i_MovesSeriesPtr]
 00000249  03 5D FC				add ebx, [ebp + moveNum]				;current move index - initialized to 0

 0000024C  0F BE 1B				movsx ebx, byte PTR [ebx] 						;get the current move value

 0000024F  83 FB 3B				cmp ebx, ';'							;if all moves done (reached ';') end game
 00000252  74 39				je endOfMoves
					
 00000254  03 F3				add esi, ebx							;move esi position according to move value
 00000256  FE 45 FC				inc byte Ptr [ebp + moveNum]			;increment move counter
 00000259  3B 35 0000006D R			cmp esi, lastCellOnBoard				;if passed the last cell on the board = error
 0000025F  7F 39				jg passedLastCellOnBoard

 00000261				checkCurrCell:
 00000261  80 3E 45				cmp BYTE PTR [esi], 'E'
 00000264  74 0D				je E							;jump if the cell is 'E'
 00000266  80 3E 53				cmp BYTE PTR [esi], 'S'
 00000269  74 15				je S							;jump if the cell is 'S'
					
						;if the current cell holds a digit add its value to score
 0000026B					digit:
 0000026B  0F BE 0E					movsx ecx, BYTE PTR [esi]	;add the value in current cell to score
 0000026E  01 4D F8					add [ebp + currentScore], ecx
 00000271  EB D3					jmp makeMove				;else make another move

						;if the current cell is 'E' then move one row up and check the value of the cell again
 00000273					E:
 00000273  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 00000276  FF 75 08					push [ebp + i_NumCols]
 00000279  E8 00000097					call stepOnE
 0000027E  EB E1					jmp checkCurrCell

						;if the current cell is 'S' then down one row and check the value of the cell again
 00000280					S:
 00000280  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 00000283  FF 75 08					push [ebp + i_NumCols]
 00000286  E8 000000B6					call stepOnS
 0000028B  EB D4					jmp checkCurrCell

						;player has played all moves
 0000028D					endOfMoves:
 0000028D  39 35 0000006D R				cmp lastCellOnBoard, esi
 00000293  75 0C					jne outOfMoves		
 00000295  8B 45 F8					mov eax, [ebp + currentScore]			;last cell reached on last move => player won
 00000298  EB 0E					jmp endOfProc

						;============================================ errors ============================================

						;the player has passed the last cell on the board
 0000029A					passedLastCellOnBoard:
 0000029A  B8 FFFFFFFF					mov eax, -1
 0000029F  EB 07					jmp endOfProc

						;the player has run out of moves before reaching the last cell on the board
 000002A1					outOfMoves:
 000002A1  B8 FFFFFFFF					mov eax, -1
 000002A6  EB 00					jmp endOfProc

 000002A8				endOfProc:
 000002A8  59					pop ecx
 000002A9  5B					pop ebx
 000002AA  5E					pop esi
 000002AB  8B E5				mov esp, ebp
 000002AD  5D					pop ebp
 000002AE  C2 0010				ret 16		
 000002B1			checksolved ENDP

				; find the shortest series that solves the board and write it in moveSeries
				; parameters (moveSeriesPtr, nomoves, rearrangedBoardPtr, numRows, numCols)
				; assumption: the board is valid and rearanged
 000002B1			findshortseries PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 = 00000014				i_Nomoves = i_RearrangedBoardPtr + 4
 = 00000018				i_MovesSeriesPtr = i_Nomoves + 4

 =-00000004				lengthOfSeries = -4

 000002B1  55				push ebp
 000002B2  8B EC			mov ebp, esp
					; init lengthOfSeries
 000002B4  6A 01			push 1
 000002B6  53				push ebx

					; init moveSeries 
 000002B7  8B 5D 18			mov ebx, [ebp + i_MovesSeriesPtr]
 000002BA  C6 03 01			mov [ebx], byte PTR 1
 000002BD  43				inc ebx
 000002BE  C6 03 3B			mov [ebx], byte PTR ';'

 000002C1				loop1:
 000002C1  FF 75 18				push [ebp + i_MovesSeriesPtr]
 000002C4  FF 75 10				push [ebp + i_RearrangedBoardPtr]
 000002C7  FF 75 0C				push [ebp + i_NumRows]
 000002CA  FF 75 08				push [ebp + i_NumCols]
 000002CD  E8 FFFFFF67				call checksolved
 000002D2  83 F8 FF				cmp eax, -1
 000002D5  75 2C				jne solved

 000002D7  FF 75 18				push [ebp + i_MovesSeriesPtr]
 000002DA  FF 75 FC				push [ebp + lengthOfSeries]
 000002DD  E8 FFFFFF1F				call nextMove
 000002E2  83 F8 01				cmp eax, 1
 000002E5  74 02				je incSeriesLength
 000002E7  E2 D8				LOOP loop1

 000002E9				incSeriesLength:
 000002E9  8B 5D 14				mov	ebx, [ebp + i_Nomoves]
 000002EC  3B 5D FC				cmp ebx, [ebp + lengthOfSeries]
 000002EF  74 14				je noPossibleSolution

 000002F1  8B 5D 18				mov ebx, [ebp + i_MovesSeriesPtr]
 000002F4  03 5D FC				add ebx, [ebp + lengthOfSeries]
 000002F7  C6 03 01				mov [ebx], byte PTR 1
 000002FA  43					inc ebx
 000002FB  C6 03 3B				mov [ebx], byte PTR ';'

 000002FE  FE 45 FC				inc byte PTR [ebp + lengthOfSeries]
 00000301  E2 BE				LOOP loop1

 00000303				solved:		
 00000303  EB 09				jmp endOfProc
					
 00000305				noPossibleSolution:
 00000305  C6 45 18 FF				mov [ebp + i_MovesSeriesPtr], sbyte PTR -1
 00000309  B8 FFFFFFFF				mov eax, -1

 0000030E				endOfProc:
 0000030E  5B					pop ebx
 0000030F  8B E5				mov esp, ebp
 00000311  5D					pop ebp
 00000312  C2 0014				ret 20
 00000315			findshortseries ENDP

				; increment ESI to the row above
				; parameters (rearrangedBoardPtr, numCols)
				; assumptions: rearrangedBoardPtr points to a valid board
 00000315			stepOnE PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_RearrangedBoardPtr = i_NumCols + 4
 00000315  55				push ebp
 00000316  8B EC			mov ebp, esp
 00000318  50				push eax
 00000319  53				push ebx
 0000031A  52				push edx

					;calculate numCols - (currCell % numCols)
 0000031B  FF 75 0C			push [ebp + i_RearrangedBoardPtr]
 0000031E  FF 75 08			push [ebp + i_NumCols]
 00000321  E8 0000003F			call calc_ESI_Mod_NumCols				; eax = (currCell % numCols)
 00000326  8B D8			mov ebx, eax
 00000328  8B 45 08			mov eax, [ebp + i_NumCols]
 0000032B  48				dec eax
 0000032C  2B C3			sub eax, ebx							;eax = numCols - (currCell % numCols)

					;calculate ((numCols -(esi % numCols)) * 2) + 1
 0000032E  BB 00000002			mov ebx, 2
 00000333  F7 E3			mul ebx				;eax = ((numCols -(currCell % numCols)) * 2)
 00000335  40				inc eax				;eax = ((numCols -(currCell % numCols)) * 2) + 1
						
 00000336  03 F0			add esi, eax		;move esi to row above on the board

 00000338  5A				pop edx
 00000339  5B				pop ebx
 0000033A  58				pop eax
 0000033B  8B E5			mov esp, ebp
 0000033D  5D				pop ebp
 0000033E  C2 0008			ret 8
 00000341			stepOnE ENDP

				; decrement ESI to the row above
				; parameters (rearrangedBoardPtr, numCols)
				; assumptions: rearrangedBoardPtr points to a valid board
 00000341			stepOnS PROC
 = 00000008				i_NumCols = 8
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 00000341  55				push ebp
 00000342  8B EC			mov ebp, esp
 00000344  50				push eax
 00000345  53				push ebx
 00000346  52				push edx

					; calculate (esi % numCols) => eax
 00000347  FF 75 10			push [ebp + i_RearrangedBoardPtr]
 0000034A  FF 75 08			push [ebp + i_NumCols]
 0000034D  E8 00000013			call calc_ESI_Mod_NumCols
					
					;calculate ((esi % numCols) * 2) + 1
 00000352  BB 00000002			mov ebx, 2
 00000357  F7 E3			mul ebx			;eax = ((currCell % numCols) * 2)
 00000359  40				inc eax			;eax = ((currCell % numCols) * 2) + 1
					
 0000035A  2B F0			sub esi, eax	;move esi to row below on the board

 0000035C  5A				pop edx
 0000035D  5B				pop ebx
 0000035E  58				pop eax
 0000035F  8B E5			mov esp,ebp
 00000361  5D				pop ebp
 00000362  C2 0008			ret 8 
 00000365			stepOnS ENDP

				; calculates esi (currentCell) modulos numCols  => currCell%numCols, returns the value in eax register
				; parameters (rearrangedBoardPtr, numCols)
 00000365			calc_ESI_Mod_NumCols PROC
 = 00000008				i_NumCols = 8
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 00000365  55				push ebp
 00000366  8B EC			mov ebp, esp
 00000368  53				push ebx
 00000369  52				push edx

 0000036A  BA 00000000			mov edx, 0
 0000036F  8B C6			mov eax, esi
 00000371  2B 45 10			sub eax, [ebp + i_RearrangedBoardPtr]
 00000374  8B 5D 08			mov ebx, [ebp + i_NumCols]
 00000377  F7 F3			div ebx
 00000379  8B C2			mov eax, edx				;eax = (currCell % numCols)

 0000037B  5A				pop edx
 0000037C  5B				pop ebx
 0000037D  8B E5			mov esp, ebp
 0000037F  5D				pop ebp
 00000380  C2 0004			ret 4
 00000383			calc_ESI_Mod_NumCols ENDP


				; given a series of moves, calculate the score
				; parameters (moveSeriesPtr, rearrangedBoardPtr, numRows, numCols)
				; assumption: the board is valid and rearanged, the set of moves is valid
 00000383			writescore PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows =  i_NumCols + 4
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 = 00000014				i_MovesSeriesPtr = i_RearrangedBoardPtr + 4

 00000383  55				push ebp
 00000384  8B EC			mov ebp, esp
 00000386  56				push esi
 00000387  53				push ebx
 00000388  51				push ecx

					;============================================ start making moves on the board ============================================
					;initialize the game
 00000389  B8 00000000			mov eax, 0			;init the score to 0
 0000038E  8B 75 10			mov esi, [ebp + i_RearrangedBoardPtr]

 00000391				makeMove:
 00000391  8B 5D 14				mov ebx, [ebp + i_MovesSeriesPtr]
 00000394  0F BE 1B				movsx ebx, byte PTR [ebx] 				;get the current move value
 00000397  83 FB 3B				cmp ebx, ';'							;if all moves done (reached ';') end game
 0000039A  74 30				je endOfMoves

 0000039C  03 F3				add esi, ebx							;move esi position according to move value

 0000039E				checkCurrCell:
 0000039E  80 3E 45				cmp BYTE PTR [esi], 'E'
 000003A1  74 0F				je E							;jump if the cell is 'E'
 000003A3  80 3E 53				cmp BYTE PTR [esi], 'S'
 000003A6  74 17				je S							;jump if the cell is 'S'
					
						;if the current cell holds a digit add its value to score
 000003A8					digit:
 000003A8  0F BE 1E					movsx ebx, BYTE PTR [esi]
 000003AB  03 C3					add eax, ebx								;add the value in current cell to score
 000003AD  FF 45 14					inc DWORD PTR [ebp + i_MovesSeriesPtr]		;move the movesSeries pointer to the next move
 000003B0  EB DF					jmp makeMove								;else make another move

						;if the current cell is 'E' then move one row up and check the value of the cell again
 000003B2					E:
 000003B2  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 000003B5  FF 75 08					push [ebp + i_NumCols]
 000003B8  E8 FFFFFF58					call stepOnE
 000003BD  EB DF					jmp checkCurrCell

						;if the current cell is 'S' then down one row and check the value of the cell again
 000003BF					S:
 000003BF  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 000003C2  FF 75 08					push [ebp + i_NumCols]
 000003C5  E8 FFFFFF77					call stepOnS
 000003CA  EB D2					jmp checkCurrCell

					;player has played all moves
 000003CC				endOfMoves:
 000003CC  59					pop ecx
 000003CD  5B					pop ebx
 000003CE  5E					pop esi
 000003CF  8B E5				mov esp, ebp
 000003D1  5D					pop ebp
 000003D2  C2 0010				ret 16		
 000003D5			writescore ENDP

				END myMain
Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/06/17 18:28:09
ex							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000007B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003D5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calc_ESI_Mod_NumCols . . . . . .	P Near	 00000365 _TEXT	Length= 0000001E Public STDCALL
checkboard . . . . . . . . . . .	P Near	 00000175 _TEXT	Length= 00000075 Public STDCALL
  checkRows  . . . . . . . . . .	L Near	 00000187 _TEXT	
  checkCols  . . . . . . . . . .	L Near	 0000018C _TEXT	
  notS . . . . . . . . . . . . .	L Near	 0000019C _TEXT	
  nextCol  . . . . . . . . . . .	L Near	 000001AB _TEXT	
  checkLastRowForE . . . . . . .	L Near	 000001B8 _TEXT	
  checkFirstRowForS  . . . . . .	L Near	 000001CE _TEXT	
  lp2  . . . . . . . . . . . . .	L Near	 000001D1 _TEXT	
  invalidBoard . . . . . . . . .	L Near	 000001DB _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 000001E0 _TEXT	
checksolved  . . . . . . . . . .	P Near	 00000239 _TEXT	Length= 00000078 Public STDCALL
  makeMove . . . . . . . . . . .	L Near	 00000246 _TEXT	
  checkCurrCell  . . . . . . . .	L Near	 00000261 _TEXT	
  digit  . . . . . . . . . . . .	L Near	 0000026B _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 00000273 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 00000280 _TEXT	
  endOfMoves . . . . . . . . . .	L Near	 0000028D _TEXT	
  passedLastCellOnBoard  . . . .	L Near	 0000029A _TEXT	
  outOfMoves . . . . . . . . . .	L Near	 000002A1 _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 000002A8 _TEXT	
copyAndRearangeBoard . . . . . .	P Near	 000000D8 _TEXT	Length= 0000009D Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 000000FD _TEXT	
  copyOddRow . . . . . . . . . .	L Near	 00000116 _TEXT	
  copyCell1  . . . . . . . . . .	L Near	 00000127 _TEXT	
  copyEvenRow  . . . . . . . . .	L Near	 00000141 _TEXT	
  copyCell2  . . . . . . . . . .	L Near	 00000148 _TEXT	
  endOfCopy  . . . . . . . . . .	L Near	 00000163 _TEXT	
findshortseries  . . . . . . . .	P Near	 000002B1 _TEXT	Length= 00000064 Public STDCALL
  loop1  . . . . . . . . . . . .	L Near	 000002C1 _TEXT	
  incSeriesLength  . . . . . . .	L Near	 000002E9 _TEXT	
  solved . . . . . . . . . . . .	L Near	 00000303 _TEXT	
  noPossibleSolution . . . . . .	L Near	 00000305 _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 0000030E _TEXT	
moveEsiToBottomLeft  . . . . . .	P Near	 000001EA _TEXT	Length= 00000017 Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 000001F5 _TEXT	
myMain . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D8 Public STDCALL
  invalidBoard . . . . . . . . .	L Near	 00000074 _TEXT	
  gameEnded  . . . . . . . . . .	L Near	 00000085 _TEXT	
nextmove . . . . . . . . . . . .	P Near	 00000201 _TEXT	Length= 00000038 Public STDCALL
  incPrev  . . . . . . . . . . .	L Near	 00000214 _TEXT	
  isLessThan6  . . . . . . . . .	L Near	 00000224 _TEXT	
  all6Series . . . . . . . . . .	L Near	 00000229 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000230 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stepOnE  . . . . . . . . . . . .	P Near	 00000315 _TEXT	Length= 0000002C Public STDCALL
stepOnS  . . . . . . . . . . . .	P Near	 00000341 _TEXT	Length= 00000024 Public STDCALL
writescore . . . . . . . . . . .	P Near	 00000383 _TEXT	Length= 00000052 Public STDCALL
  makeMove . . . . . . . . . . .	L Near	 00000391 _TEXT	
  checkCurrCell  . . . . . . . .	L Near	 0000039E _TEXT	
  digit  . . . . . . . . . . . .	L Near	 000003A8 _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 000003B2 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 000003BF _TEXT	
  endOfMoves . . . . . . . . . .	L Near	 000003CC _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_DIGIT  . . . . . . . . . . .	Number	 00000028h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_DIGIT  . . . . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000002 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
currRow  . . . . . . . . . . . .	Byte	 0000006C _DATA	
currentScore . . . . . . . . . .	Number	 -00000008h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameFinStr . . . . . . . . . . .	Byte	 0000003B _DATA	
gamefin  . . . . . . . . . . . .	Byte	 00000045 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
i_BoardPtr . . . . . . . . . . .	Number	 00000010h   
i_MovesSeriesPtr . . . . . . . .	Number	 00000014h   
i_Nomoves  . . . . . . . . . . .	Number	 00000014h   
i_NumCols  . . . . . . . . . . .	Number	 00000008h   
i_NumRows  . . . . . . . . . . .	Number	 0000000Ch   
i_RearrangedBoardPtr . . . . . .	Number	 00000010h   
i_lengthOfSeries . . . . . . . .	Number	 00000008h   
lastCellOnBoard  . . . . . . . .	DWord	 0000006D _DATA	
lengthOfSeries . . . . . . . . .	Number	 -00000004h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
moveNumStr . . . . . . . . . . .	Byte	 00000052 _DATA	
moveNum  . . . . . . . . . . . .	Number	 -00000004h   
moveseries . . . . . . . . . . .	Byte	 00000071 _DATA	
moves  . . . . . . . . . . . . .	Byte	 00000012 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000018 _DATA	
nomoves  . . . . . . . . . . . .	Byte	 00000017 _DATA	
numcols  . . . . . . . . . . . .	Byte	 00000001 _DATA	
numrows  . . . . . . . . . . . .	Byte	 00000000 _DATA	
rearrangedBoard  . . . . . . . .	Byte	 0000005C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreStr . . . . . . . . . . . .	Byte	 00000046 _DATA	
score  . . . . . . . . . . . . .	DWord	 0000004E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
