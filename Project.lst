Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/09/17 14:57:32
ex							     Page 1 - 1


				; file: ex3.asm
				; Dudi Yecheskel , ID 200441749

				TITLE ex3
				; This program simulates a board game as described in the instructions
				; the program finds the shortest valid move series possible that gets a player
				; to the last cell in the board. The length of the series will be at most 
				; nomoves (a parameter given in the "ex3_data.inc" file).
				; if the board is invalid, or no series of moves is found with less moves than nomoves
				; then the value of score and the first move in moveseries will be -1.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE ex3_data.inc
			      C ; file: ex2.asm
			      C ; Dudi Yecheskel , ID 200441749
			      C 
 00000000		      C .data
 00000000 04		      C 	numrows	BYTE 4
 00000001 04		      C 	numcols BYTE 4
 00000002 03 17 0E 53 13      C 	board	BYTE 3, 23, 14, 'S',
	   53 45 0C 09 53
	   21 11 01 0A 45
	   05
			      C 				 19, 'S', 'E', 12,
			      C 				 9, 'S', 33, 17,
			      C 				 1, 10, 'E', 5	
 00000012 05		      C 	nomoves BYTE 5
			      C 

 00000013			.data
 00000013 44 75 64 69 20		myName BYTE "Dudi Yecheskel  ID:200441749  EX2", 10, 0
	   59 65 63 68 65
	   73 6B 65 6C 20
	   20 49 44 3A 32
	   30 30 34 34 31
	   37 34 39 20 20
	   45 58 32 0A 00
 00000036  00003F01 [			moveseries SBYTE 127*127 DUP(?)					; the resulting series of moves (board size is at most 127*127)
	    00
	   ]
 00003F37  00000010 [			rearrangedBoard BYTE LENGTHOF board DUP(?)		; a copy of the given board, rearanged by stepping order
	    00
	   ]
 00003F47 00000000			lastCellOnBoard DWORD ?							; the address of the last cell on the board
 00003F4B 00000000			score DWORD 0									; sum of cell values if player wins or error identifier if player looses
 = 00000001				MIN_DIGIT = 1									; the minimal digit value of a cell in a valid board
 = 00000028				MAX_DIGIT = 40									; the maximal digit value of a cell in a valid board

 00000000			.code
 00000000			myMain PROC
					;Print my name
 00000000  BA 00000013 R		mov edx, OFFSET myName
 00000005  E8 00000000 E		call writestring

					; checkBoard(boardPtr, numCols, numRows)
 0000000A  68 00000002 R		push OFFSET board
 0000000F  0F B6 05			movzx eax, numrows
	   00000000 R
 00000016  50				push eax
 00000017  0F B6 05			movzx eax, numcols
	   00000001 R
 0000001E  50				push eax
 0000001F  E8 000000A3			call checkboard
 00000024  83 F8 FF			cmp eax, -1
 00000027  74 76			je invalidBoard

					; copyAndRearangeBoard(boardPtr, rearangedBoardPtr, numRows, numCols, lastCellOnBoardPtr)
 00000029  68 00000002 R		push OFFSET board
 0000002E  68 00003F37 R		push OFFSET rearrangedBoard
 00000033  0F B6 05			movzx eax, numrows
	   00000000 R
 0000003A  50				push eax
 0000003B  0F B6 05			movzx eax, numcols
	   00000001 R
 00000042  50				push eax
 00000043  68 00003F47 R		push OFFSET lastCellOnBoard
 00000048  E8 0000024F			call copyAndRearangeBoard	
					
					; findshortseries(moveSeriesPtr, nomoves, rearrangedBoardPtr, numRows, numCols)
 0000004D  68 00000036 R		push OFFSET moveseries
 00000052  0F BE 05			movsx eax, nomoves
	   00000012 R
 00000059  50				push eax
 0000005A  68 00003F37 R		push OFFSET rearrangedBoard
 0000005F  0F BE 05			movsx eax, numrows
	   00000000 R
 00000066  50				push eax
 00000067  0F B6 05			movzx eax, numcols
	   00000001 R
 0000006E  50				push eax
 0000006F  E8 00000172			call findshortseries
 00000074  83 F8 FF			cmp eax, -1
 00000077  74 26			je invalidBoard

					; writeScore( moveSeriesPtr, rearangedBoardPtr, numRows, numCols)
 00000079  68 00000036 R		push OFFSET moveseries
 0000007E  68 00003F37 R		push OFFSET rearrangedBoard
 00000083  0F BE 05			movsx eax, numrows
	   00000000 R
 0000008A  50				push eax
 0000008B  0F B6 05			movzx eax, numcols
	   00000001 R
 00000092  50				push eax
 00000093  E8 000001B2			call writescore
 00000098  A3 00003F4B R		mov score, eax
 0000009D  EB 11			jmp printRes

 0000009F				invalidBoard:
 0000009F  C7 05 00003F4B R			mov score, -1
	   FFFFFFFF
 000000A9  C6 05 00000036 R			mov moveseries, -1
	   FF
					
					; printResults(moveseriesPtr, score)
 000000B0				printRes:
 000000B0  68 00000036 R			push OFFSET moveseries
 000000B5  A1 00003F4B R			mov eax, [score]
 000000BA  50					push eax
 000000BB  E8 000002F6				call printResults

					exit
 000000C0  6A 00	   *	    push   +000000000h
 000000C2  E8 00000000 E   *	    call   ExitProcess
 000000C7			myMain ENDP

				; ============================================================= Procedures required in exercise =============================================================

				; original board is transfered, board is checked from last row to the first
				; parameters: boardPtr, numRows, numCols
 000000C7			checkboard PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_BoardPtr = i_NumRows + 4
					
 000000C7  55				push ebp
 000000C8  8B EC			mov ebp, esp
 000000CA  56				push esi
 000000CB  53				push ebx
 000000CC  51				push ecx
 000000CD  52				push edx

					;set eax to 0, will be changed to -1 if the board is invalid
 000000CE  B8 00000000			mov eax, 0

					;check if there is an 'E' on the top row
 000000D3  8B 75 10			mov esi, [ebp + i_BoardPtr]
 000000D6  8B 4D 08			mov ecx, [ebp + i_NumCols]
 000000D9				checkLastRowForE:
 000000D9  80 3E 45				cmp [esi], byte PTR 'E'
 000000DC  74 4F				je invalidBoard
 000000DE  46					inc	esi
 000000DF  E2 F8				LOOP checkLastRowForE
					
					;check if there is an 'S' on the bottom row
					;get to bottom left cell using procedure: moveEsiToBottomLeft(boardPtr, numRows, numCols)
 000000E1  FF 75 10			push [ebp + i_BoardPtr]
 000000E4  FF 75 0C			push [ebp + i_NumRows]
 000000E7  FF 75 08			push [ebp + i_NumCols]
 000000EA  E8 00000244			call moveEsiToBottomLeft

					;loop trough cells of first row
 000000EF  8B 4D 08			mov ecx, [ebp + i_NumCols]
 000000F2				checkFirstRowForS:
 000000F2  80 3E 53				cmp [esi], byte PTR 'S'
 000000F5  74 36				je invalidBoard
 000000F7  46					inc esi
 000000F8  E2 F8				LOOP checkFirstRowForS

					; loop to check all rows of the board
 000000FA  8B 75 10			mov esi, [ebp + i_BoardPtr]	
 000000FD  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 00000100				checkRows:
 00000100  8B D9				mov ebx, ecx
						; loop to check all columns in the the current row
 00000102  8B 4D 08				mov ecx, [ebp + i_NumCols]
 00000105					checkCols:
 00000105  80 3E 53					cmp [esi], byte PTR 'S'
 00000108  75 0B					jne notS							; if 'S' check cell under				
 0000010A  8B 55 08					mov edx, [ebp + i_NumCols]			; edx = distance to cell under current cell
 0000010D  80 3C 32 45					cmp [esi + edx], byte PTR 'E'		; compare cell under with 'E'
 00000111  74 1A					je invalidBoard						; if equal then there is E under S
 00000113  EB 0F					jmp nextCol

 00000115						notS:
							;if 'E' there can't be S above so there is no need to check (we are checking from top to bottom)
 00000115  80 3E 45					cmp [esi], byte PTR 'E'				
 00000118  74 0A					je nextCol

							;not 'S' or 'E' validate that the cell value is a digit between 1 and 40
 0000011A  80 3E 01					cmp [esi], byte PTR MIN_DIGIT
 0000011D  7C 0E					jl invalidBoard
 0000011F  80 3E 28					cmp [esi], byte PTR MAX_DIGIT
 00000122  7F 09					jg invalidBoard

 00000124						nextCol:
 00000124  46							inc esi
 00000125  E2 DE						LOOP checkCols

 00000127  8B CB				mov ecx, ebx
 00000129  E2 D5				LOOP checkRows

					; if passed all checks, jump to end of procedure
 0000012B  EB 05			jmp endOfProc
					
					; if at any point an invalid cell value is found, will jump to here
 0000012D				invalidBoard:
 0000012D  B8 FFFFFFFF				mov eax, -1

 00000132				endOfProc:
 00000132  5A					pop edx
 00000133  59					pop ecx
 00000134  5B					pop ebx
 00000135  5E					pop esi
 00000136  8B E5				mov esp, ebp
 00000138  5D					pop ebp
 00000139  C2 000C				ret 12
 0000013C			checkboard ENDP

				; gets a pointer to a series of moves, and returns the next series
				; assumption: all values of the series are numbers between 1-6
				; parameters: moveseriesPtr, lengthOfSeries
 0000013C			nextmove PROC
 = 00000008				i_LengthOfSeries = 8
 = 0000000C				i_MoveseriesPtr = i_LengthOfSeries + 4

 0000013C  55				push ebp
 0000013D  8B EC			mov ebp, esp
 0000013F  56				push esi
 00000140  51				push ecx

					; initialize EAX to 0, will be changed to 1 if series is 66...6
					; [esi] = currentMovesereisValue
 00000141  B8 00000000			mov eax, 0
 00000146  8B 75 0C			mov esi, [ebp + i_MoveseriesPtr]
 00000149  03 75 08			add esi, [ebp + i_LengthOfSeries]
 0000014C				incPrev:
 0000014C  4E					dec esi
 0000014D  3B 75 0C				cmp esi, [ebp + i_MoveseriesPtr]		; check is esi is pointing to a place in memory before moveSeriesPtr
 00000150  7C 0F				jl all6Series							; if esi < moveseriesPtr, the current series is all 6
 00000152  80 3E 06				cmp [esi], byte PTR 6
 00000155  7C 05				jl isLessThan6
 00000157  C6 06 01				mov [esi], byte PTR 1
 0000015A  E2 F0				LOOP incPrev
					
 0000015C				isLessThan6:
 0000015C  80 06 01				add [esi], byte PTR 1
 0000015F  EB 07				jmp endProc

 00000161				all6Series:
 00000161  B8 00000001				mov eax, 1
 00000166  EB 00				jmp endProc

 00000168				endProc:
 00000168  59				pop ecx
 00000169  5E				pop esi
 0000016A  8B E5			mov esp, ebp
 0000016C  5D				pop ebp
 0000016D  C2 0008			ret 8
 00000170			nextmove ENDP

				; check if a given move series solves the board
				; assumption: the board is valid and rearanged
				; parameters: moveSeriesPtr, rearrangedBoardPtr, numRows, numCols
 00000170			checksolved PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows =  i_NumCols + 4
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 = 00000014				i_MoveseriesPtr = i_RearrangedBoardPtr + 4

 =-00000004				moveNum = - 4
 =-00000008				currentScore = moveNum - 4

 00000170  55				push ebp
 00000171  8B EC			mov ebp, esp
					; init moveNum and score to 0
 00000173  6A 00			push 0
 00000175  6A 00			push 0
 00000177  56				push esi
 00000178  53				push ebx
 00000179  51				push ecx

					; esi is the pointer to the current cell on the board, initialize it to the first cell
 0000017A  8B 75 10			mov esi, [ebp + i_RearrangedBoardPtr]
 0000017D  B8 00000000			mov eax, 0

					; main loop that makex a move accoridng to the moveseries and checks the values of the cell stepped on
 00000182				makeMove:
 00000182  8B 5D 14				mov ebx, [ebp + i_MoveseriesPtr]
 00000185  03 5D FC				add ebx, [ebp + moveNum]				;current move index - initialized to 0

 00000188  0F BE 1B				movsx ebx, byte PTR [ebx] 				;get the current move value

 0000018B  83 FB 3B				cmp ebx, ';'							;if all moves done (reached ';') end game
 0000018E  74 39				je endOfMoves
					
 00000190  03 F3				add esi, ebx							;move esi position according to move value
 00000192  FE 45 FC				inc byte PTR [ebp + moveNum]			;increment move counter
 00000195  3B 35 00003F47 R			cmp esi, lastCellOnBoard				;if passed the last cell on the board => error
 0000019B  7F 39				jg passedLastCellOnBoard

					; check the value of the current cell
 0000019D				checkCurrCell:
 0000019D  80 3E 45				cmp BYTE PTR [esi], 'E'
 000001A0  74 0D				je E							;jump if the cell is 'E'
 000001A2  80 3E 53				cmp BYTE PTR [esi], 'S'
 000001A5  74 15				je S							;jump if the cell is 'S'
					
						; if the current cell holds a digit add its value to score and make another move
 000001A7					digit:
 000001A7  0F BE 0E					movsx ecx, BYTE PTR [esi]		; add the value in current cell to score
 000001AA  01 4D F8					add [ebp + currentScore], ecx
 000001AD  EB D3					jmp makeMove					; make another move

						;if the current cell is 'E' then move one row up and check the value of the cell again
 000001AF					E:
 000001AF  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 000001B2  FF 75 08					push [ebp + i_NumCols]
 000001B5  E8 00000190					call stepOnE
 000001BA  EB E1					jmp checkCurrCell

						;if the current cell is 'S' then down one row and check the value of the cell again
 000001BC					S:
 000001BC  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 000001BF  FF 75 08					push [ebp + i_NumCols]
 000001C2  E8 000001AD					call stepOnS
 000001C7  EB D4					jmp checkCurrCell

						;player has played all moves
 000001C9					endOfMoves:
 000001C9  39 35 00003F47 R				cmp lastCellOnBoard, esi
 000001CF  75 05					jne outOfMoves							; if on the last move esi != lastCellOnBoard then the series given is not good
 000001D1  8B 45 F8					mov eax, [ebp + currentScore]			; else (last cell reached on last move) => player won => save score in eax
 000001D4  EB 07					jmp endOfProc

						; if the player has passed the last cell on the board 
						; or 
						; the player has run out of moves before reaching the last cell on the board
 000001D6					outOfMoves:
 000001D6					passedLastCellOnBoard:
 000001D6  B8 FFFFFFFF					mov eax, -1
 000001DB  EB 00					jmp endOfProc

 000001DD				endOfProc:
 000001DD  59					pop ecx
 000001DE  5B					pop ebx
 000001DF  5E					pop esi
 000001E0  8B E5				mov esp, ebp
 000001E2  5D					pop ebp
 000001E3  C2 0010				ret 16		
 000001E6			checksolved ENDP

				; find the shortest series that solves the board and write it in moveSeries
				; assumption: the board is valid and rearanged
				; parameters: moveSeriesPtr, nomoves, rearrangedBoardPtr, numRows, numCols
 000001E6			findshortseries PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 = 00000014				i_Nomoves = i_RearrangedBoardPtr + 4
 = 00000018				i_MoveseriesPtr = i_Nomoves + 4

 =-00000004				lengthOfSeries = -4

 000001E6  55				push ebp
 000001E7  8B EC			mov ebp, esp
					; init lengthOfSeries
 000001E9  6A 01			push 1
 000001EB  53				push ebx

					; init moveSeries 
 000001EC  8B 5D 18			mov ebx, [ebp + i_MoveseriesPtr]
 000001EF  C6 03 01			mov [ebx], byte PTR 1
 000001F2  43				inc ebx
 000001F3  C6 03 3B			mov [ebx], byte PTR ';'

					; main loop that generates moves and checks if they solve the board
 000001F6				mainLoop:
 000001F6  FF 75 18				push [ebp + i_MoveseriesPtr]
 000001F9  FF 75 10				push [ebp + i_RearrangedBoardPtr]
 000001FC  FF 75 0C				push [ebp + i_NumRows]
 000001FF  FF 75 08				push [ebp + i_NumCols]
 00000202  E8 FFFFFF69				call checksolved
 00000207  83 F8 FF				cmp eax, -1
 0000020A  75 2C				jne solved

 0000020C  FF 75 18				push [ebp + i_MoveseriesPtr]
 0000020F  FF 75 FC				push [ebp + lengthOfSeries]
 00000212  E8 FFFFFF25				call nextMove
 00000217  83 F8 01				cmp eax, 1
 0000021A  74 02				je incSeriesLength
 0000021C  E2 D8				LOOP mainLoop
					
						; nextMove has returned eax = 1 => we need to increment the seriesLength and add 1 to the end
 0000021E					incSeriesLength:
							; check if we haven't reach the maximum series length (nomoves)
 0000021E  8B 5D 14					mov	ebx, [ebp + i_Nomoves]
 00000221  3B 5D FC					cmp ebx, [ebp + lengthOfSeries]
 00000224  74 14					je noPossibleSolution

							; add 1,';' to the end of the current series and increment the lengthOfSeries value
 00000226  8B 5D 18					mov ebx, [ebp + i_MoveseriesPtr]
 00000229  03 5D FC					add ebx, [ebp + lengthOfSeries]
 0000022C  C6 03 01					mov [ebx], byte PTR 1
 0000022F  43						inc ebx
 00000230  C6 03 3B					mov [ebx], byte PTR ';'
 00000233  FE 45 FC					inc byte PTR [ebp + lengthOfSeries]
 00000236  E2 BE					LOOP mainLoop

 00000238				solved:		
 00000238  EB 09				jmp endOfProc
					
 0000023A				noPossibleSolution:
 0000023A  C6 45 18 FF				mov [ebp + i_MoveseriesPtr], SBYTE PTR -1
 0000023E  B8 FFFFFFFF				mov eax, -1

 00000243				endOfProc:
 00000243  5B					pop ebx
 00000244  8B E5				mov esp, ebp
 00000246  5D					pop ebp
 00000247  C2 0014				ret 20
 0000024A			findshortseries ENDP

				; given a series of moves, calculate the score
				; assumption: the board is valid and rearanged, the set of moves is valid and ends at the last cell
				; parameters: moveSeriesPtr, rearrangedBoardPtr, numRows, numCols
 0000024A			writescore PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows =  i_NumCols + 4
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 = 00000014				i_MoveseriesPtr = i_RearrangedBoardPtr + 4

 0000024A  55				push ebp
 0000024B  8B EC			mov ebp, esp
 0000024D  56				push esi
 0000024E  53				push ebx
 0000024F  51				push ecx

 00000250  B8 00000000			mov eax, 0									; init the score to 0
 00000255  8B 75 10			mov esi, [ebp + i_RearrangedBoardPtr]

 00000258				makeMove:
 00000258  8B 5D 14				mov ebx, [ebp + i_MoveseriesPtr]
 0000025B  0F BE 1B				movsx ebx, byte PTR [ebx] 				; get the current move value
 0000025E  83 FB 3B				cmp ebx, ';'							; if all moves done (reached ';') end game
 00000261  74 30				je endOfMoves

 00000263  03 F3				add esi, ebx							; move esi position according to move value

 00000265				checkCurrCell:
 00000265  80 3E 45				cmp BYTE PTR [esi], 'E'
 00000268  74 0F				je E									; jump if the cell is 'E'
 0000026A  80 3E 53				cmp BYTE PTR [esi], 'S'
 0000026D  74 17				je S									; jump if the cell is 'S'
					
						;if the current cell holds a digit add its value to score
 0000026F					digit:
 0000026F  0F BE 1E					movsx ebx, BYTE PTR [esi]
 00000272  03 C3					add eax, ebx								;add the value in current cell to score
 00000274  FF 45 14					inc DWORD PTR [ebp + i_MoveseriesPtr]		;move the moveseries pointer to the next move
 00000277  EB DF					jmp makeMove								;else make another move

						;if the current cell is 'E' then move one row up and check the value of the cell again
 00000279					E:
 00000279  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 0000027C  FF 75 08					push [ebp + i_NumCols]
 0000027F  E8 000000C6					call stepOnE
 00000284  EB DF					jmp checkCurrCell

						;if the current cell is 'S' then down one row and check the value of the cell again
 00000286					S:
 00000286  FF 75 10					push [ebp + i_RearrangedBoardPtr]
 00000289  FF 75 08					push [ebp + i_NumCols]
 0000028C  E8 000000E3					call stepOnS
 00000291  EB D2					jmp checkCurrCell

					;player has played all moves
 00000293				endOfMoves:
 00000293  59					pop ecx
 00000294  5B					pop ebx
 00000295  5E					pop esi
 00000296  8B E5				mov esp, ebp
 00000298  5D					pop ebp
 00000299  C2 0010				ret 16		
 0000029C			writescore ENDP

				; ============================================================= Additional procedures =============================================================

				; gets a pointer to the unput board, and copies it in moving order to a new place in memory 
				; assumption: all values of the series are numbers between 1-6
				; parameters: (boardPtr, rearangedBoardPtr, numRows, numCols, lastCellOnBoardPtr)
 0000029C			copyAndRearangeBoard PROC	
 = 00000008				o_lastCellOnBoardPtr = 8
 = 0000000C				i_numCols = o_lastCellOnBoardPtr + 4
 = 00000010				i_NumRows = i_numCols + 4
 = 00000014				o_RearangedBoardPtr = i_NumRows  + 4
 = 00000018				i_BoardPtr = o_RearangedBoardPtr + 4
					
 =-00000004				currRow = -4		; the current row index being copied

 0000029C  55				push ebp
 0000029D  8B EC			mov ebp, esp
 0000029F  6A 00			push 0				; initialize currRow value
 000002A1  60				PUSHAD	

					; initialize esi (boardPtr) and edi (rearangedBoardPtr)
 000002A2  8B 75 18			mov esi, [ebp + i_BoardPtr]
 000002A5  8B 7D 14			mov edi, [ebp + o_RearangedBoardPtr]

					; set esi to the bottom left cell
					; moveEsiToBottomLeft(boardPtr, numRows, numCols)
 000002A8  FF 75 18			push [ebp + i_BoardPtr]
 000002AB  FF 75 10			push [ebp + i_Numrows]
 000002AE  FF 75 0C			push [ebp + i_Numcols]
 000002B1  E8 0000007D			call moveEsiToBottomLeft

					; main loop - each itteration copies a single row from board to rearrangedBoard
 000002B6				nextRow:
						; compare curr to board, if curr < board then finished copying
						; (*) it doesn't matter if the last row is even or odd, in both cases the first cell is not less than 'OFFSET board'
 000002B6  3B 75 18				cmp esi, [ebp + i_BoardPtr]
 000002B9  7C 22				jl endOfCopy

						;check parity of row index
 000002BB  8B 45 FC				mov eax, [ebp + currRow]
 000002BE  83 E0 01				and eax, 1
 000002C1  83 F8 01				cmp eax, 1			;(eax = 1 => odd row number)
 000002C4  74 0A				je copyOddRowLabel

 000002C6					copyEvenRowLabel:
							; copyEvenRow(numCols)
 000002C6  FF 75 0C					push [ebp + i_numCols]
 000002C9  E8 00000046					call copyEvenRow
 000002CE  EB 08					jmp endOfRowCopy

 000002D0					copyOddRowLabel:
							; copyOddRow(numCols)
 000002D0  FF 75 0C					push [ebp + i_numCols]
 000002D3  E8 0000001C					call copyOddRow
						
 000002D8					endOfRowCopy:			
 000002D8  FE 45 FC					inc BYTE PTR [ebp + currRow]
 000002DB  EB D9					jmp nextRow

 000002DD				endOfCopy:
						;set lastCellOnBoard to be the address of the last cell
 000002DD  B8 00003F37 R			mov eax, OFFSET rearrangedBoard
 000002E2  83 C0 10				add eax, SIZEOF rearrangedBoard
 000002E5  83 E8 01				sub eax, TYPE rearrangedBoard
 000002E8  A3 00003F47 R			mov lastCellOnBoard, eax
					
 000002ED  61				POPAD
 000002EE  8B E5			mov esp, ebp
 000002F0  5D				pop ebp
 000002F1  C2 0014			ret 20
 000002F4			copyAndRearangeBoard ENDP

				; procedure to copy an entire odd index row from esi to edi
				; essumption: esi and edi are at the beginning of the source and destination rows
				; parameters: (numCols)
 000002F4			copyOddRow PROC
 = 00000008				i_NumCols = 8
 000002F4  55				push ebp

 000002F5  8B EC			mov ebp, esp
 000002F7  50				push eax
 000002F8  51				push ecx

					;jump to the end of the source row to copy backwards
 000002F9  03 75 08			add esi, [ebp + i_NumCols]
 000002FC  4E				dec esi

					; cells are copied one by one because we don't know in advance the value of numCols
 000002FD  8B 4D 08			mov ecx, [ebp + i_NumCols]
 00000300				copyCell:
 00000300  8A 06				mov al, BYTE PTR [esi]
 00000302  88 07				mov [edi], al
 00000304  47					inc edi
 00000305  4E					dec esi
 00000306  E2 F8				loop copyCell

					; set esi to the beginning of the row above
 00000308  2B 75 08			sub esi, [ebp + i_NumCols]
 0000030B  46				inc esi

 0000030C  59				pop ecx
 0000030D  58				pop eax
 0000030E  8B E5			mov esp, ebp
 00000310  5D				pop ebp
 00000311  C2 0004			ret 4
 00000314			copyOddRow ENDP

				; procedure to copy an entire even index row from esi to edi
				; essumption, esi and edi are at the beginning of the source and destination rows
				; parameters: numCols
 00000314			copyEvenRow PROC
 = 00000008				i_NumCols = 8
					
 00000314  55				push ebp
 00000315  8B EC			mov ebp, esp
 00000317  50				push eax
 00000318  51				push ecx

					; cells are copied one by one because we don't know in advance the value of numCols
 00000319  8B 4D 08			mov ecx, [ebp + i_NumCols]
 0000031C				copyCell:
 0000031C  8A 06				mov al, BYTE PTR [esi]
 0000031E  88 07				mov [edi], al
 00000320  47					inc edi
 00000321  46					inc esi
 00000322  E2 F8				loop copyCell

					;set esi to the beginning of the row above
 00000324  8B 45 08			mov eax, [ebp + i_NumCols]
 00000327  2B F0			sub esi, eax
 00000329  2B F0			sub esi, eax

 0000032B  59				pop ecx
 0000032C  58				pop eax
 0000032D  8B E5			mov esp, ebp
 0000032F  5D				pop ebp
 00000330  C2 0004			ret 4
 00000333			copyEvenRow ENDP

				; set ESI to point at the bottom left cell of the given board
				; parameters: boardPtr, numRows, numCols
 00000333			moveEsiToBottomLeft PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_BoardPtr = i_NumRows + 4

 00000333  55				push ebp
 00000334  8B EC			mov ebp, esp
 00000336  51				push ecx

					; esi += (numRows-1) * numCols
 00000337  8B 75 10			mov esi, [ebp + i_BoardPtr]
 0000033A  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 0000033D  49				dec ecx
 0000033E				nextRow:
 0000033E  03 75 08				add esi, [ebp + i_NumCols]
 00000341  E2 FB				LOOP nextRow
						
 00000343  59				pop ecx
 00000344  8B E5			mov esp, ebp
 00000346  5D				pop ebp
 00000347  C2 000C			ret 12
 0000034A			moveEsiToBottomLeft ENDP

				; increment ESI to the row above
				; assumptions: rearrangedBoardPtr points to a valid board
				; parameters: rearrangedBoardPtr, numCols
 0000034A			stepOnE PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_RearrangedBoardPtr = i_NumCols + 4

 0000034A  55				push ebp
 0000034B  8B EC			mov ebp, esp
 0000034D  50				push eax
 0000034E  53				push ebx

					; to move esi to the cell above the current position we need to increment 
					; it's value by ((numCols -(currCell % numCols)) * 2) + 1.
					; calculate numCols - (currCell % numCols)
 0000034F  FF 75 0C			push [ebp + i_RearrangedBoardPtr]
 00000352  FF 75 08			push [ebp + i_NumCols]
 00000355  E8 0000003E			call calc_ESI_Mod_NumCols				; eax = (currCell % numCols)
 0000035A  8B D8			mov ebx, eax
 0000035C  8B 45 08			mov eax, [ebp + i_NumCols]
 0000035F  48				dec eax
 00000360  2B C3			sub eax, ebx							; eax = (numCols - 1) - (currCell % numCols)

					;calculate ((numCols -(esi % numCols)) * 2) + 1
 00000362  BB 00000002			mov ebx, 2
 00000367  F7 E3			mul ebx				; eax = ((numCols -(currCell % numCols)) * 2)
 00000369  40				inc eax				; eax = ((numCols -(currCell % numCols)) * 2) + 1

					; move esi to row above on the board
 0000036A  03 F0			add esi, eax		; esi += ((numCols -(esi % numCols)) * 2) + 1

 0000036C  5B				pop ebx
 0000036D  58				pop eax
 0000036E  8B E5			mov esp, ebp
 00000370  5D				pop ebp
 00000371  C2 0008			ret 8
 00000374			stepOnE ENDP

				; decrement ESI to the row above
				; assumptions: rearrangedBoardPtr points to a valid board
				; parameters: rearrangedBoardPtr, numCols
 00000374			stepOnS PROC
 = 00000008				i_NumCols = 8
 = 00000010				i_RearrangedBoardPtr = i_NumRows + 4
 00000374  55				push ebp
 00000375  8B EC			mov ebp, esp
 00000377  50				push eax
 00000378  53				push ebx
 00000379  52				push edx

					; to move esi to the cell below the current position we need to decrement 
					; it's value by ((currCell % numCols) * 2) + 1.
					;calculate ((esi % numCols) * 2) + 1
 0000037A  FF 75 10			push [ebp + i_RearrangedBoardPtr]
 0000037D  FF 75 08			push [ebp + i_NumCols]
 00000380  E8 00000013			call calc_ESI_Mod_NumCols		; eax = (currCell % numCols)
 00000385  BB 00000002			mov ebx, 2
 0000038A  F7 E3			mul ebx							
 0000038C  40				inc eax							; eax = ((currCell % numCols) * 2) + 1

					;move esi to row below on the board
 0000038D  2B F0			sub esi, eax					; esi -= ((currCell % numCols) * 2) + 1

 0000038F  5A				pop edx
 00000390  5B				pop ebx
 00000391  58				pop eax
 00000392  8B E5			mov esp,ebp
 00000394  5D				pop ebp
 00000395  C2 0008			ret 8 
 00000398			stepOnS ENDP

				; calculates esi (currentCell) modulos numCols  => currCell%numCols, returns the value in eax register
				; parameters: rearrangedBoardPtr, numCols
 00000398			calc_ESI_Mod_NumCols PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_RearrangedBoardPtr = i_NumCols + 4
 00000398  55				push ebp
 00000399  8B EC			mov ebp, esp
 0000039B  53				push ebx
 0000039C  52				push edx

 0000039D  BA 00000000			mov edx, 0
 000003A2  8B C6			mov eax, esi
 000003A4  2B 45 0C			sub eax, [ebp + i_RearrangedBoardPtr]
 000003A7  8B 5D 08			mov ebx, [ebp + i_NumCols]
 000003AA  F7 F3			div ebx
 000003AC  8B C2			mov eax, edx				; eax = (currCell % numCols)

 000003AE  5A				pop edx
 000003AF  5B				pop ebx
 000003B0  8B E5			mov esp, ebp
 000003B2  5D				pop ebp
 000003B3  C2 0008			ret 8
 000003B6			calc_ESI_Mod_NumCols ENDP

				; print the results to the console
				; assumption: moveseries must end with ';'
				; parameters: moveseriesPtr, score
 00003F4F			.data
 00003F4F 2C 20 00			comma BYTE ", " , 0
 00003F52 6D 6F 76 65 73		moveseriesStr BYTE "moveseries: ", 0
	   65 72 69 65 73
	   3A 20 00
 00003F5F 73 63 6F 72 65		scoreStr BYTE "score: " , 0
	   3A 20 00

 000003B6			.code
 000003B6			printResults PROC
 = 00000008				i_Score = 8
 = 0000000C				i_MoveSeriesPtr = i_Score + 4
					
 000003B6  55				push ebp
 000003B7  8B EC			mov ebp, esp
 000003B9  50				push eax
 000003BA  52				push edx
 000003BB  56				push esi

					; esi points to the current value in moveseries
 000003BC  8B 75 0C			mov esi, [ebp + i_MoveSeriesPtr]

					; print "moveseries: "
 000003BF  BA 00003F52 R		mov edx, OFFSET moveseriesStr
 000003C4  E8 00000000 E		call writeString
					
					 ; check if the series is valid (valid iff first value in moveseries not -1)
 000003C9  8B 45 0C			 mov eax, [ebp + i_MoveSeriesPtr]
 000003CC  0F BE 00			 movsx eax, SBYTE PTR [eax]
 000003CF  83 F8 FF			 cmp eax, -1
 000003D2  75 07			 jnz printMove 
					 ; if score == -1 print "-1" and skip the printMove loop
 000003D4  E8 00000000 E		 call writeInt
 000003D9  EB 1A			 jmp endOfMoveSeriesPrint

					; print the moveseries until reaching ';' (the first move can't be ';' so we print it without checking first)
					; each loop prints the current value and checks if the next one is ';'
 000003DB				printMove:		
 000003DB  0F BE 06				movsx eax, SBYTE PTR [esi]
 000003DE  E8 00000000 E			call writeDec
 000003E3  46					inc esi
 000003E4  80 3E 3B				cmp [esi], byte PTR ';'
 000003E7  74 0C				jz endOfMoveSeriesPrint			; if the next moveseries valus is ';' we have reached the end of moveseries
 000003E9  BA 00003F4F R			mov edx, OFFSET comma			; else print ", " and loop to print the next value
 000003EE  E8 00000000 E			call writeString
 000003F3  EB E6				jmp printMove

					; when finished printing the moveseries go down to the next row
 000003F5				endOfMoveSeriesPrint:
 000003F5  E8 00000000 E		call CRLF	
					
					;print score
 000003FA  BA 00003F5F R		mov edx, OFFSET scoreStr
 000003FF  E8 00000000 E		call writeString
 00000404  8B 45 08			mov eax, [ebp + i_Score]
 00000407  E8 00000000 E		call writeInt
 0000040C  E8 00000000 E		call CRLF

 00000411  5E				pop esi
 00000412  5A				pop edx
 00000413  58				pop eax
 00000414  8B E5			mov esp, ebp
 00000416  5D				pop ebp
 00000417  C2 0008			ret 8
 0000041A			printResults ENDP

				END myMain
Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/09/17 14:57:32
ex							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003F67 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000041A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calc_ESI_Mod_NumCols . . . . . .	P Near	 00000398 _TEXT	Length= 0000001E Public STDCALL
checkboard . . . . . . . . . . .	P Near	 000000C7 _TEXT	Length= 00000075 Public STDCALL
  checkLastRowForE . . . . . . .	L Near	 000000D9 _TEXT	
  checkFirstRowForS  . . . . . .	L Near	 000000F2 _TEXT	
  checkRows  . . . . . . . . . .	L Near	 00000100 _TEXT	
  checkCols  . . . . . . . . . .	L Near	 00000105 _TEXT	
  notS . . . . . . . . . . . . .	L Near	 00000115 _TEXT	
  nextCol  . . . . . . . . . . .	L Near	 00000124 _TEXT	
  invalidBoard . . . . . . . . .	L Near	 0000012D _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 00000132 _TEXT	
checksolved  . . . . . . . . . .	P Near	 00000170 _TEXT	Length= 00000076 Public STDCALL
  makeMove . . . . . . . . . . .	L Near	 00000182 _TEXT	
  checkCurrCell  . . . . . . . .	L Near	 0000019D _TEXT	
  digit  . . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 000001AF _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 000001BC _TEXT	
  endOfMoves . . . . . . . . . .	L Near	 000001C9 _TEXT	
  outOfMoves . . . . . . . . . .	L Near	 000001D6 _TEXT	
  passedLastCellOnBoard  . . . .	L Near	 000001D6 _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 000001DD _TEXT	
copyAndRearangeBoard . . . . . .	P Near	 0000029C _TEXT	Length= 00000058 Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 000002B6 _TEXT	
  copyEvenRowLabel . . . . . . .	L Near	 000002C6 _TEXT	
  copyOddRowLabel  . . . . . . .	L Near	 000002D0 _TEXT	
  endOfRowCopy . . . . . . . . .	L Near	 000002D8 _TEXT	
  endOfCopy  . . . . . . . . . .	L Near	 000002DD _TEXT	
copyEvenRow  . . . . . . . . . .	P Near	 00000314 _TEXT	Length= 0000001F Public STDCALL
  copyCell . . . . . . . . . . .	L Near	 0000031C _TEXT	
copyOddRow . . . . . . . . . . .	P Near	 000002F4 _TEXT	Length= 00000020 Public STDCALL
  copyCell . . . . . . . . . . .	L Near	 00000300 _TEXT	
findshortseries  . . . . . . . .	P Near	 000001E6 _TEXT	Length= 00000064 Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 000001F6 _TEXT	
  incSeriesLength  . . . . . . .	L Near	 0000021E _TEXT	
  solved . . . . . . . . . . . .	L Near	 00000238 _TEXT	
  noPossibleSolution . . . . . .	L Near	 0000023A _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 00000243 _TEXT	
moveEsiToBottomLeft  . . . . . .	P Near	 00000333 _TEXT	Length= 00000017 Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 0000033E _TEXT	
myMain . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C7 Public STDCALL
  invalidBoard . . . . . . . . .	L Near	 0000009F _TEXT	
  printRes . . . . . . . . . . .	L Near	 000000B0 _TEXT	
nextmove . . . . . . . . . . . .	P Near	 0000013C _TEXT	Length= 00000034 Public STDCALL
  incPrev  . . . . . . . . . . .	L Near	 0000014C _TEXT	
  isLessThan6  . . . . . . . . .	L Near	 0000015C _TEXT	
  all6Series . . . . . . . . . .	L Near	 00000161 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000168 _TEXT	
printResults . . . . . . . . . .	P Near	 000003B6 _TEXT	Length= 00000064 Public STDCALL
  printMove  . . . . . . . . . .	L Near	 000003DB _TEXT	
  endOfMoveSeriesPrint . . . . .	L Near	 000003F5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stepOnE  . . . . . . . . . . . .	P Near	 0000034A _TEXT	Length= 0000002A Public STDCALL
stepOnS  . . . . . . . . . . . .	P Near	 00000374 _TEXT	Length= 00000024 Public STDCALL
writescore . . . . . . . . . . .	P Near	 0000024A _TEXT	Length= 00000052 Public STDCALL
  makeMove . . . . . . . . . . .	L Near	 00000258 _TEXT	
  checkCurrCell  . . . . . . . .	L Near	 00000265 _TEXT	
  digit  . . . . . . . . . . . .	L Near	 0000026F _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 00000279 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 00000286 _TEXT	
  endOfMoves . . . . . . . . . .	L Near	 00000293 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_DIGIT  . . . . . . . . . . .	Number	 00000028h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_DIGIT  . . . . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000002 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 00003F4F _DATA	
currRow  . . . . . . . . . . . .	Number	 -00000004h   
currentScore . . . . . . . . . .	Number	 -00000008h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
i_BoardPtr . . . . . . . . . . .	Number	 00000010h   
i_LengthOfSeries . . . . . . . .	Number	 00000008h   
i_MoveseriesPtr  . . . . . . . .	Number	 0000000Ch   
i_Nomoves  . . . . . . . . . . .	Number	 00000014h   
i_NumCols  . . . . . . . . . . .	Number	 00000008h   
i_NumRows  . . . . . . . . . . .	Number	 0000000Ch   
i_RearrangedBoardPtr . . . . . .	Number	 0000000Ch   
i_Score  . . . . . . . . . . . .	Number	 00000008h   
lastCellOnBoard  . . . . . . . .	DWord	 00003F47 _DATA	
lengthOfSeries . . . . . . . . .	Number	 -00000004h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
moveNum  . . . . . . . . . . . .	Number	 -00000004h   
moveseriesStr  . . . . . . . . .	Byte	 00003F52 _DATA	
moveseries . . . . . . . . . . .	Byte	 00000036 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000013 _DATA	
nomoves  . . . . . . . . . . . .	Byte	 00000012 _DATA	
numcols  . . . . . . . . . . . .	Byte	 00000001 _DATA	
numrows  . . . . . . . . . . . .	Byte	 00000000 _DATA	
o_RearangedBoardPtr  . . . . . .	Number	 00000014h   
o_lastCellOnBoardPtr . . . . . .	Number	 00000008h   
rearrangedBoard  . . . . . . . .	Byte	 00003F37 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreStr . . . . . . . . . . . .	Byte	 00003F5F _DATA	
score  . . . . . . . . . . . . .	DWord	 00003F4B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
