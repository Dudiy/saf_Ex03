Microsoft (R) Macro Assembler Version 14.10.25019.0	    05/31/17 22:18:03
ex							     Page 1 - 1


				; file: ex3.asm
				; Dudi Yecheskel , ID 200441749

				TITLE ex3
				; This program simulates a board game as described in the instructions

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE ex3_data.inc
			      C ; file: ex2.asm
			      C ; Dudi Yecheskel , ID 200441749
			      C 
 00000000		      C .data
 00000000 04		      C 	numrows	BYTE 4
 00000001 04		      C 	numcols BYTE 4
 00000002 03 17 0E 53 13      C 	board	BYTE 3, 23, 14, 'S',
	   53 45 45 09 53
	   21 11 01 0A 45
	   05
			      C 				 19, 'S', 'E', 'E',
			      C 				 9, 'S', 33, 17,
			      C 				 1, 10, 'E', 5	
 00000012 05 05 04 02 3B      C 	moves BYTE 5, 5, 4, 2, ';'
 00000017 05		      C 	nomoves BYTE 5
			      C 

 00000018			.data
 00000018 44 75 64 69 20		myName BYTE "Dudi Yecheskel  ID:200441749  EX2",10,0
	   59 65 63 68 65
	   73 6B 65 6C 20
	   20 49 44 3A 32
	   30 30 34 34 31
	   37 34 39 20 20
	   45 58 32 0A 00
 0000003B 67 61 6D 65 46		gameFinStr BYTE "gameFin: " , 0
	   69 6E 3A 20 00
 00000045 00				gamefin BYTE 0									;init to 0 - will change to 1 only if the player wins
 00000046 73 63 6F 72 65		scoreStr BYTE "score: " , 0
	   3A 20 00
 0000004E 00000000			score DWORD 0									;sum of cell values if player wins or error identifier if player looses
 00000052 6D 6F 76 65 4E		moveNumStr BYTE "moveNum: ", 0
	   75 6D 3A 20 00
 0000005C 0000				moveNum WORD 0									;the number of moves made before the game ended
 0000005E  00000010 [			rearrangedBoard BYTE LENGTHOF board DUP(?)		;a copy of the given board, rearanged by stepping order
	    00
	   ]
 0000006E 00				currRow BYTE 0									;the current row being copied
 0000006F 00000000			lastCellOnBoard DWORD ?							;the address of the last cell on the board
 00000073 00				moveseries SBYTE ?
 00000000			.code
 00000000			myMain PROC
					;Print my name
 00000000  BA 00000018 R		mov edx, OFFSET myName
 00000005  E8 00000000 E		call writestring

 0000000A  B8 00000002 R		mov eax, OFFSET board		
 0000000F  68 00000002 R		push OFFSET board
 00000014  0F B6 05			movzx eax, numrows
	   00000000 R
 0000001B  50				push eax
 0000001C  0F B6 05			movzx eax, numcols
	   00000001 R
 00000023  50				push eax
 00000024  E8 000001E9			call checkboard
 00000029  83 F8 FF			cmp eax, -1
 0000002C  0F 84 000000EA		je invalidBoard

 00000032  E8 0000014C			call copyAndRearangeBoard	
					;============================================ start making moves on the board ============================================
					;initialize the game
 00000037  BE 0000005E R		mov esi, OFFSET rearrangedBoard

 0000003C				makeMove:
 0000003C  0F BF 05				movsx eax, moveNum						;current move index - initialized to 0
	   0000005C R
 00000043  0F BE 98				movsx ebx, BYTE PTR moves[eax] 			;get the current move value
	   00000012 R

 0000004A  83 FB 3B				cmp ebx, ';'							;if all moves done (reached ';') end game
 0000004D  0F 84 00000088			je endOfMoves
					
 00000053  03 F3				add esi, ebx							;move esi position according to move value
 00000055  66| FF 05				inc moveNum								;increment move counter
	   0000005C R
 0000005C  3B 35 0000006F R			cmp esi, lastCellOnBoard				;if passed the last cell on the board = error
 00000062  0F 8F 0000009C			jg passedLastCellOnBoard

 00000068				checkCurrCell:
 00000068  80 3E 45				cmp BYTE PTR [esi], 'E'
 0000006B  74 10				je E							;jump if the cell is 'E'
 0000006D  80 3E 53				cmp BYTE PTR [esi], 'S'
 00000070  74 3E				je S							;jump if the cell is 'S'
					
						;if the current cell holds a digit add its value to score
 00000072					digit:
 00000072  0F BE 0E					movsx ecx, BYTE PTR [esi]	;add the value in current cell to score
 00000075  01 0D 0000004E R				add score, ecx
 0000007B  EB BF					jmp makeMove				;else make another move

						;if the current cell is 'E' then move one row up and check the value of the cell again
						;the number of moves to make in order to go up one row: ((numCols -(currCell % numCols)) * 2) + 1
 0000007D					E:
							;calculate: numCols - (currCell % numCols)
 0000007D  BA 00000000					mov edx, 0
 00000082  8B C6					mov eax, esi
 00000084  2D 0000005E R				sub eax, OFFSET rearrangedBoard
 00000089  0F BE 1D					movsx ebx, numCols
	   00000001 R
 00000090  F7 F3					div ebx
 00000092  0F BE 05					movsx eax, numCols
	   00000001 R
 00000099  48						dec eax
 0000009A  2B C2					sub eax, edx		;eax = numCols - (currCell % numCols)

							;calculate ((numCols -(esi % numCols)) * 2) + 1
 0000009C  BB 00000002					mov ebx, 2
 000000A1  F7 E3					mul ebx				;eax = ((numCols -(currCell % numCols)) * 2)
 000000A3  40						inc eax				;eax = ((numCols -(currCell % numCols)) * 2) + 1
						
 000000A4  03 F0					add esi, eax		;move esi to row above on the board

							;check if after "climbing" up we are above the board
 000000A6  3B 35 0000006F R				cmp esi, lastCellOnBoard
 000000AC  7F 4A					jg foundEOnLastRow
 000000AE  EB B8					jmp checkCurrCell

						;if the current cell is 'S' then down one row and check the value of the cell again
						;the number of moves to make in order to go down one row: - ((currCell % numCols) * 2) + 1
 000000B0					S:
							;calculate (currCell % numCols)
 000000B0  BA 00000000					mov edx, 0
 000000B5  8B C6					mov eax, esi
 000000B7  2D 0000005E R				sub eax, OFFSET rearrangedBoard
 000000BC  0F BE 1D					movsx ebx, numCols
	   00000001 R
 000000C3  F7 F3					div ebx
 000000C5  8B C2					mov eax, edx	;eax = (currCell % numCols)

							;calculate ((esi % numCols) * 2) + 1
 000000C7  BB 00000002					mov ebx, 2
 000000CC  F7 E3					mul ebx			;eax = ((currCell % numCols) * 2)
 000000CE  40						inc eax			;eax = ((currCell % numCols) * 2) + 1

 000000CF  2B F0					sub esi, eax	;move esi to row below on the board
						
							;check if after "sliding" down we are under the board
 000000D1  81 FE 0000005E R				cmp esi, OFFSET rearrangedBoard
 000000D7  7C 13					jl foundSOnFirstRow
 000000D9  EB 8D					jmp checkCurrCell

						;player has played all moves
 000000DB					endOfMoves:
 000000DB  39 35 0000006F R				cmp lastCellOnBoard, esi
 000000E1  75 2D					jne outOfMoves		
 000000E3  C6 05 00000045 R				mov gamefin, 1			;last cell reached on last move => player won
	   01
 000000EA  EB 41					jmp gameEnded

						;============================================ errors ============================================

						;stepped on 'S' while on the first (bottom) row
 000000EC					foundSOnFirstRow:
 000000EC  C7 05 0000004E R				mov score, 1
	   00000001
 000000F6  EB 35					jmp gameEnded

						;stepped on 'E' while on the last (top) row
 000000F8					foundEOnLastRow:
 000000F8  C7 05 0000004E R				mov score, 2
	   00000002
 00000102  EB 29					jmp gameEnded

						;the player has passed the last cell on the board
 00000104					passedLastCellOnBoard:
 00000104  C7 05 0000004E R				mov score, 3
	   00000003
 0000010E  EB 1D					jmp gameEnded

						;the player has run out of moves before reaching the last cell on the board
 00000110					outOfMoves:
 00000110  C7 05 0000004E R				mov score, 4
	   00000004
 0000011A  EB 11					jmp gameEnded

 0000011C					invalidBoard:
 0000011C  C7 05 0000004E R				mov score, -1
	   FFFFFFFF
 00000126  C6 05 00000073 R				mov moveseries, -1
	   FF
						;============================================ end of game - print results ============================================
 0000012D					gameEnded:
							;print gameFin
 0000012D  BA 0000003B R				mov edx, OFFSET gameFinStr
 00000132  E8 00000000 E				call writeString
 00000137  0F BE 05					movsx eax, gamefin
	   00000045 R
 0000013E  E8 00000000 E				call writedec
 00000143  E8 00000000 E				call CRLF
						
							;print score
 00000148  BA 00000046 R				mov edx, OFFSET scoreStr
 0000014D  E8 00000000 E				call writeString
 00000152  A1 0000004E R				mov eax, score
 00000157  E8 00000000 E				call writedec
 0000015C  E8 00000000 E				call CRLF

							;print moveNum
 00000161  BA 00000052 R				mov edx, OFFSET moveNumStr
 00000166  E8 00000000 E				call writeString
 0000016B  0F BF 05					movsx eax, moveNum
	   0000005C R
 00000172  E8 00000000 E				call writedec
 00000177  E8 00000000 E				call CRLF

						exit
 0000017C  6A 00	   *	    push   +000000000h
 0000017E  E8 00000000 E   *	    call   ExitProcess
 00000183			myMain ENDP

 00000183			copyAndRearangeBoard PROC	
 00000183  60				PUSHAD	
 00000184  BE 00000002 R		mov esi, OFFSET board
 00000189  BF 0000005E R		mov edi, OFFSET rearrangedBoard

					;set esi to the bottom left cell
 0000018E  83 C6 10			add esi, SIZEOF board	
 00000191  0F BE 1D			movsx ebx, BYTE PTR numCols			;if we want this to be generic we can multiply this value by 'TYPE board' (here its 1 so there is no need)
	   00000001 R
 00000198  2B F3			sub esi, ebx

					;main loop - each itteration copies a single row from board to rearrangedBoard
 0000019A				nextRow:
						;compare curr to board, if curr < board then finished copying
						; (*) it doesn't matter if the last row is even or odd, in both cases the first cell is not less than 'OFFSET board'
 0000019A  81 FE 00000002 R			cmp esi, OFFSET board
 000001A0  7C 5E				jl endOfCopy

						;check parity 
 000001A2  0F BE 05				movsx eax, currRow
	   0000006E R
 000001A9  83 E0 01				and eax, 1
 000001AC  83 F8 01				cmp eax, 1			;(eax = 1 => odd row number)
 000001AF  74 02				je copyOddRow
 000001B1  75 2B				jne copyEvenRow

 000001B3				copyOddRow:
						;jump to the end of the row to copy backwards
 000001B3  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 000001BA  03 F0				add esi, eax
 000001BC  4E					dec esi

 000001BD  0F BE 0D				movsx ecx, BYTE PTR numCols
	   00000001 R
						; cells are copied one by one because we don't know in advance the value of numCols
 000001C4					copyCell1:
 000001C4  8A 06					mov al, BYTE PTR [esi]
 000001C6  88 07					mov [edi], al
 000001C8  47						inc edi
 000001C9  4E						dec esi
 000001CA  E2 F8					loop copyCell1

						;set esi to the beginning of the row above
 000001CC  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 000001D3  2B F0				sub esi, eax
 000001D5  46					inc esi
 000001D6  FE 05 0000006E R			inc currRow
 000001DC  EB BC				jmp nextRow

 000001DE				copyEvenRow:
 000001DE  0F BE 0D				movsx ecx, BYTE PTR numCols
	   00000001 R
 000001E5					copyCell2:
 000001E5  8A 06					mov al, BYTE PTR [esi]
 000001E7  88 07					mov [edi], al
 000001E9  47						inc edi
 000001EA  46						inc esi
 000001EB  E2 F8					loop copyCell2

						;set esi to the beginning of the row above
 000001ED  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 000001F4  2B F0				sub esi, eax
 000001F6  2B F0				sub esi, eax
 000001F8  FE 05 0000006E R			inc currRow
 000001FE  EB 9A				jmp nextRow

 00000200				endOfCopy:
						;set lastCellOnBoard to be the address of the last cell
 00000200  B8 0000005E R			mov eax, OFFSET rearrangedBoard
 00000205  83 C0 10				add eax, SIZEOF rearrangedBoard
 00000208  83 E8 01				sub eax, TYPE rearrangedBoard
 0000020B  A3 0000006F R			mov lastCellOnBoard, eax
					
 00000210  61				POPAD
 00000211  C3				ret
 00000212			copyAndRearangeBoard ENDP

				; original board is transfered, board is checked from last row to the first
 00000212			checkboard PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				BoardPtr = i_NumRows + 4
					
 00000212  55				push ebp
 00000213  8B EC			mov ebp, esp
 00000215  56				push esi
 00000216  53				push ebx
 00000217  51				push ecx

 00000218  8B 75 10			mov esi, [ebp + BoardPtr]
 0000021B  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 0000021E				checkRows:
 0000021E  8B D9				mov ebx, ecx
 00000220  8B 4D 08				mov ecx, [ebp + i_NumCols]
 00000223					checkCols:
 00000223  56						push esi
 00000224  FF 75 10					push [ebp + BoardPtr]
 00000227  E8 00000034					call checkCell
 0000022C						nextCol:
 0000022C  46							inc esi
 0000022D  E2 F4						LOOP checkCols
 0000022F  8B CB				mov ecx, ebx
 00000231  E2 EB				LOOP checkRows

 00000233				checkLastRowForE:
 00000233  80 3E 45				cmp [esi], byte PTR 'E'
 00000236  74 1A				je invalidBoard
 00000238  46					inc	esi
 00000239  E2 F8				LOOP checkLastRowForE

 0000023B				checkFirstRowForS:
 0000023B  8B 75 10				mov esi, [ebp + BoardPtr]

 0000023E  03 75 0C				add esi, [ebp + i_NumRows]
 00000241  8B 5D 0C				mov ebx, [ebp + i_NumRows]
					

 00000244  80 3E 53				cmp [esi], byte PTR 'S'
 00000247  74 00				je checkEUnderS

 00000249				checkEUnderS:
 00000249  8B 5D 08				mov ebx, [ebp + i_NumCols];
 0000024C  80 3C 33 45				cmp [esi + ebx], byte PTR 'E'
 00000250  74 00				je invalidBoard

 00000252				invalidBoard:
 00000252  B8 FFFFFFFF				mov eax, -1

 00000257				endOfProc:
 00000257  59					pop ecx
 00000258  5B					pop ebx
 00000259  5E					pop esi
 0000025A  8B E5				mov esp, ebp
 0000025C  5D					pop ebp
 0000025D  C2 000C				ret 12
 00000260			checkboard ENDP

				; parmeters (cell address, first cell address, last cell address)
 00000260			checkCell PROC
					
 00000260  C3				ret
 00000261			checkCell ENDP

 00000261			nextmove PROC

 00000261  C3				ret
 00000262			nextmove ENDP

				END myMain
Microsoft (R) Macro Assembler Version 14.10.25019.0	    05/31/17 22:18:03
ex							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000074 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000262 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkCell  . . . . . . . . . . .	P Near	 00000260 _TEXT	Length= 00000001 Public STDCALL
checkboard . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 0000004E Public STDCALL
  checkRows  . . . . . . . . . .	L Near	 0000021E _TEXT	
  checkCols  . . . . . . . . . .	L Near	 00000223 _TEXT	
  nextCol  . . . . . . . . . . .	L Near	 0000022C _TEXT	
  checkLastRowForE . . . . . . .	L Near	 00000233 _TEXT	
  checkFirstRowForS  . . . . . .	L Near	 0000023B _TEXT	
  checkEUnderS . . . . . . . . .	L Near	 00000249 _TEXT	
  invalidBoard . . . . . . . . .	L Near	 00000252 _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 00000257 _TEXT	
copyAndRearangeBoard . . . . . .	P Near	 00000183 _TEXT	Length= 0000008F Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 0000019A _TEXT	
  copyOddRow . . . . . . . . . .	L Near	 000001B3 _TEXT	
  copyCell1  . . . . . . . . . .	L Near	 000001C4 _TEXT	
  copyEvenRow  . . . . . . . . .	L Near	 000001DE _TEXT	
  copyCell2  . . . . . . . . . .	L Near	 000001E5 _TEXT	
  endOfCopy  . . . . . . . . . .	L Near	 00000200 _TEXT	
myMain . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000183 Public STDCALL
  makeMove . . . . . . . . . . .	L Near	 0000003C _TEXT	
  checkCurrCell  . . . . . . . .	L Near	 00000068 _TEXT	
  digit  . . . . . . . . . . . .	L Near	 00000072 _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 0000007D _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 000000B0 _TEXT	
  endOfMoves . . . . . . . . . .	L Near	 000000DB _TEXT	
  foundSOnFirstRow . . . . . . .	L Near	 000000EC _TEXT	
  foundEOnLastRow  . . . . . . .	L Near	 000000F8 _TEXT	
  passedLastCellOnBoard  . . . .	L Near	 00000104 _TEXT	
  outOfMoves . . . . . . . . . .	L Near	 00000110 _TEXT	
  invalidBoard . . . . . . . . .	L Near	 0000011C _TEXT	
  gameEnded  . . . . . . . . . .	L Near	 0000012D _TEXT	
nextmove . . . . . . . . . . . .	P Near	 00000261 _TEXT	Length= 00000001 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BoardPtr . . . . . . . . . . . .	Number	 00000010h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000002 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
currRow  . . . . . . . . . . . .	Byte	 0000006E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameFinStr . . . . . . . . . . .	Byte	 0000003B _DATA	
gamefin  . . . . . . . . . . . .	Byte	 00000045 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
i_NumCols  . . . . . . . . . . .	Number	 00000008h   
i_NumRows  . . . . . . . . . . .	Number	 0000000Ch   
lastCellOnBoard  . . . . . . . .	DWord	 0000006F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
moveNumStr . . . . . . . . . . .	Byte	 00000052 _DATA	
moveNum  . . . . . . . . . . . .	Word	 0000005C _DATA	
moveseries . . . . . . . . . . .	Byte	 00000073 _DATA	
moves  . . . . . . . . . . . . .	Byte	 00000012 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000018 _DATA	
nomoves  . . . . . . . . . . . .	Byte	 00000017 _DATA	
numcols  . . . . . . . . . . . .	Byte	 00000001 _DATA	
numrows  . . . . . . . . . . . .	Byte	 00000000 _DATA	
rearrangedBoard  . . . . . . . .	Byte	 0000005E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreStr . . . . . . . . . . . .	Byte	 00000046 _DATA	
score  . . . . . . . . . . . . .	DWord	 0000004E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
