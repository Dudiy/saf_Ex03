Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/01/17 23:26:27
ex							     Page 1 - 1


				; file: ex3.asm
				; Dudi Yecheskel , ID 200441749

				TITLE ex3
				; This program simulates a board game as described in the instructions

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE ex3_data.inc
			      C ; file: ex2.asm
			      C ; Dudi Yecheskel , ID 200441749
			      C 
 00000000		      C .data
 00000000 04		      C 	numrows	BYTE 4
 00000001 04		      C 	numcols BYTE 4
 00000002 03 02 0E 02 13      C 	board	BYTE 3, 2, 14, 2,
	   53 45 45 09 53
	   1F 11 01 0A 03
	   05
			      C 				 19, 'S', 'E', 'E',
			      C 				 9, 'S', 31, 17,
			      C 				 1, 10, 3, 5	
 00000012 05 05 04 02 3B      C 	moves BYTE 5, 5, 4, 2, ';'
 00000017 05		      C 	nomoves BYTE 5
			      C 

 00000018			.data
 00000018 44 75 64 69 20		myName BYTE "Dudi Yecheskel  ID:200441749  EX2",10,0
	   59 65 63 68 65
	   73 6B 65 6C 20
	   20 49 44 3A 32
	   30 30 34 34 31
	   37 34 39 20 20
	   45 58 32 0A 00
 0000003B 67 61 6D 65 46		gameFinStr BYTE "gameFin: " , 0
	   69 6E 3A 20 00
 00000045 00				gamefin BYTE 0									;init to 0 - will change to 1 only if the player wins
 00000046 73 63 6F 72 65		scoreStr BYTE "score: " , 0
	   3A 20 00
 0000004E 00000000			score DWORD 0									;sum of cell values if player wins or error identifier if player looses
 00000052 6D 6F 76 65 4E		moveNumStr BYTE "moveNum: ", 0
	   75 6D 3A 20 00
 0000005C 0000				moveNum WORD 0									;the number of moves made before the game ended
 0000005E  00000010 [			rearrangedBoard BYTE LENGTHOF board DUP(?)		;a copy of the given board, rearanged by stepping order
	    00
	   ]
 0000006E 00				currRow BYTE 0									;the current row being copied
 0000006F 00000000			lastCellOnBoard DWORD ?							;the address of the last cell on the board
 00000073 06 06 06 01 01		moveseries SBYTE 6, 6, 6, 1, 1
 = 00000001				MIN_DIGIT = 1
 = 00000028				MAX_DIGIT = 40
 00000000			.code
 00000000			myMain PROC
					;Print my name
 00000000  BA 00000018 R		mov edx, OFFSET myName
 00000005  E8 00000000 E		call writestring
					
 0000000A  68 00000073 R		push OFFSET moveSeries
 0000000F  BB 00000003			mov ebx, byte PTR 3
 00000014  53				push ebx
 00000015  E8 0000029E			call nextMove


 0000001A  68 00000002 R		push OFFSET board
 0000001F  0F B6 05			movzx eax, numrows
	   00000000 R
 00000026  50				push eax
 00000027  0F B6 05			movzx eax, numcols
	   00000001 R
 0000002E  50				push eax
 0000002F  E8 000001F7			call checkboard
 00000034  83 F8 FF			cmp eax, -1
 00000037  0F 84 000000EA		je invalidBoard

 0000003D  E8 0000014C			call copyAndRearangeBoard	
					;============================================ start making moves on the board ============================================
					;initialize the game
 00000042  BE 0000005E R		mov esi, OFFSET rearrangedBoard

 00000047				makeMove:
 00000047  0F BF 05				movsx eax, moveNum						;current move index - initialized to 0
	   0000005C R
 0000004E  0F BE 98				movsx ebx, BYTE PTR moves[eax] 			;get the current move value
	   00000012 R

 00000055  83 FB 3B				cmp ebx, ';'							;if all moves done (reached ';') end game
 00000058  0F 84 00000088			je endOfMoves
					
 0000005E  03 F3				add esi, ebx							;move esi position according to move value
 00000060  66| FF 05				inc moveNum								;increment move counter
	   0000005C R
 00000067  3B 35 0000006F R			cmp esi, lastCellOnBoard				;if passed the last cell on the board = error
 0000006D  0F 8F 0000009C			jg passedLastCellOnBoard

 00000073				checkCurrCell:
 00000073  80 3E 45				cmp BYTE PTR [esi], 'E'
 00000076  74 10				je E							;jump if the cell is 'E'
 00000078  80 3E 53				cmp BYTE PTR [esi], 'S'
 0000007B  74 3E				je S							;jump if the cell is 'S'
					
						;if the current cell holds a digit add its value to score
 0000007D					digit:
 0000007D  0F BE 0E					movsx ecx, BYTE PTR [esi]	;add the value in current cell to score
 00000080  01 0D 0000004E R				add score, ecx
 00000086  EB BF					jmp makeMove				;else make another move

						;if the current cell is 'E' then move one row up and check the value of the cell again
						;the number of moves to make in order to go up one row: ((numCols -(currCell % numCols)) * 2) + 1
 00000088					E:
							;calculate: numCols - (currCell % numCols)
 00000088  BA 00000000					mov edx, 0
 0000008D  8B C6					mov eax, esi
 0000008F  2D 0000005E R				sub eax, OFFSET rearrangedBoard
 00000094  0F BE 1D					movsx ebx, numCols
	   00000001 R
 0000009B  F7 F3					div ebx
 0000009D  0F BE 05					movsx eax, numCols
	   00000001 R
 000000A4  48						dec eax
 000000A5  2B C2					sub eax, edx		;eax = numCols - (currCell % numCols)

							;calculate ((numCols -(esi % numCols)) * 2) + 1
 000000A7  BB 00000002					mov ebx, 2
 000000AC  F7 E3					mul ebx				;eax = ((numCols -(currCell % numCols)) * 2)
 000000AE  40						inc eax				;eax = ((numCols -(currCell % numCols)) * 2) + 1
						
 000000AF  03 F0					add esi, eax		;move esi to row above on the board

							;check if after "climbing" up we are above the board
 000000B1  3B 35 0000006F R				cmp esi, lastCellOnBoard
 000000B7  7F 4A					jg foundEOnLastRow
 000000B9  EB B8					jmp checkCurrCell

						;if the current cell is 'S' then down one row and check the value of the cell again
						;the number of moves to make in order to go down one row: - ((currCell % numCols) * 2) + 1
 000000BB					S:
							;calculate (currCell % numCols)
 000000BB  BA 00000000					mov edx, 0
 000000C0  8B C6					mov eax, esi
 000000C2  2D 0000005E R				sub eax, OFFSET rearrangedBoard
 000000C7  0F BE 1D					movsx ebx, numCols
	   00000001 R
 000000CE  F7 F3					div ebx
 000000D0  8B C2					mov eax, edx	;eax = (currCell % numCols)

							;calculate ((esi % numCols) * 2) + 1
 000000D2  BB 00000002					mov ebx, 2
 000000D7  F7 E3					mul ebx			;eax = ((currCell % numCols) * 2)
 000000D9  40						inc eax			;eax = ((currCell % numCols) * 2) + 1

 000000DA  2B F0					sub esi, eax	;move esi to row below on the board
						
							;check if after "sliding" down we are under the board
 000000DC  81 FE 0000005E R				cmp esi, OFFSET rearrangedBoard
 000000E2  7C 13					jl foundSOnFirstRow
 000000E4  EB 8D					jmp checkCurrCell

						;player has played all moves
 000000E6					endOfMoves:
 000000E6  39 35 0000006F R				cmp lastCellOnBoard, esi
 000000EC  75 2D					jne outOfMoves		
 000000EE  C6 05 00000045 R				mov gamefin, 1			;last cell reached on last move => player won
	   01
 000000F5  EB 41					jmp gameEnded

						;============================================ errors ============================================

						;stepped on 'S' while on the first (bottom) row
 000000F7					foundSOnFirstRow:
 000000F7  C7 05 0000004E R				mov score, 1
	   00000001
 00000101  EB 35					jmp gameEnded

						;stepped on 'E' while on the last (top) row
 00000103					foundEOnLastRow:
 00000103  C7 05 0000004E R				mov score, 2
	   00000002
 0000010D  EB 29					jmp gameEnded

						;the player has passed the last cell on the board
 0000010F					passedLastCellOnBoard:
 0000010F  C7 05 0000004E R				mov score, 3
	   00000003
 00000119  EB 1D					jmp gameEnded

						;the player has run out of moves before reaching the last cell on the board
 0000011B					outOfMoves:
 0000011B  C7 05 0000004E R				mov score, 4
	   00000004
 00000125  EB 11					jmp gameEnded

 00000127					invalidBoard:
 00000127  C7 05 0000004E R				mov score, -1
	   FFFFFFFF
 00000131  C6 05 00000073 R				mov moveseries, -1
	   FF
						;============================================ end of game - print results ============================================
 00000138					gameEnded:
							;print gameFin
 00000138  BA 0000003B R				mov edx, OFFSET gameFinStr
 0000013D  E8 00000000 E				call writeString
 00000142  0F BE 05					movsx eax, gamefin
	   00000045 R
 00000149  E8 00000000 E				call writedec
 0000014E  E8 00000000 E				call CRLF
						
							;print score
 00000153  BA 00000046 R				mov edx, OFFSET scoreStr
 00000158  E8 00000000 E				call writeString
 0000015D  A1 0000004E R				mov eax, score
 00000162  E8 00000000 E				call writedec
 00000167  E8 00000000 E				call CRLF

							;print moveNum
 0000016C  BA 00000052 R				mov edx, OFFSET moveNumStr
 00000171  E8 00000000 E				call writeString
 00000176  0F BF 05					movsx eax, moveNum
	   0000005C R
 0000017D  E8 00000000 E				call writedec
 00000182  E8 00000000 E				call CRLF

						exit
 00000187  6A 00	   *	    push   +000000000h
 00000189  E8 00000000 E   *	    call   ExitProcess
 0000018E			myMain ENDP

 0000018E			copyAndRearangeBoard PROC	
 0000018E  60				PUSHAD	
 0000018F  BE 00000002 R		mov esi, OFFSET board
 00000194  BF 0000005E R		mov edi, OFFSET rearrangedBoard

					;set esi to the bottom left cell
					;add esi, SIZEOF board	
					;movsx ebx, BYTE PTR numCols			;if we want this to be generic we can multiply this value by 'TYPE board' (here its 1 so there is no need)
					;sub esi, ebx

 00000199  68 00000002 R		push OFFSET board
 0000019E  0F B6 05			movzx eax, numrows
	   00000000 R
 000001A5  50				push eax
 000001A6  0F B6 05			movzx eax, numcols
	   00000001 R
 000001AD  50				push eax
 000001AE  E8 000000ED			call moveEsiToBottomLeft

					;main loop - each itteration copies a single row from board to rearrangedBoard
 000001B3				nextRow:
						;compare curr to board, if curr < board then finished copying
						; (*) it doesn't matter if the last row is even or odd, in both cases the first cell is not less than 'OFFSET board'
 000001B3  81 FE 00000002 R			cmp esi, OFFSET board
 000001B9  7C 5E				jl endOfCopy

						;check parity 
 000001BB  0F BE 05				movsx eax, currRow
	   0000006E R
 000001C2  83 E0 01				and eax, 1
 000001C5  83 F8 01				cmp eax, 1			;(eax = 1 => odd row number)
 000001C8  74 02				je copyOddRow
 000001CA  75 2B				jne copyEvenRow

 000001CC				copyOddRow:
						;jump to the end of the row to copy backwards
 000001CC  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 000001D3  03 F0				add esi, eax
 000001D5  4E					dec esi

 000001D6  0F BE 0D				movsx ecx, BYTE PTR numCols
	   00000001 R
						; cells are copied one by one because we don't know in advance the value of numCols
 000001DD					copyCell1:
 000001DD  8A 06					mov al, BYTE PTR [esi]
 000001DF  88 07					mov [edi], al
 000001E1  47						inc edi
 000001E2  4E						dec esi
 000001E3  E2 F8					loop copyCell1

						;set esi to the beginning of the row above
 000001E5  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 000001EC  2B F0				sub esi, eax
 000001EE  46					inc esi
 000001EF  FE 05 0000006E R			inc currRow
 000001F5  EB BC				jmp nextRow

 000001F7				copyEvenRow:
 000001F7  0F BE 0D				movsx ecx, BYTE PTR numCols
	   00000001 R
 000001FE					copyCell2:
 000001FE  8A 06					mov al, BYTE PTR [esi]
 00000200  88 07					mov [edi], al
 00000202  47						inc edi
 00000203  46						inc esi
 00000204  E2 F8					loop copyCell2

						;set esi to the beginning of the row above
 00000206  0F BE 05				movsx eax, BYTE PTR numCols
	   00000001 R
 0000020D  2B F0				sub esi, eax
 0000020F  2B F0				sub esi, eax
 00000211  FE 05 0000006E R			inc currRow
 00000217  EB 9A				jmp nextRow

 00000219				endOfCopy:
						;set lastCellOnBoard to be the address of the last cell
 00000219  B8 0000005E R			mov eax, OFFSET rearrangedBoard
 0000021E  83 C0 10				add eax, SIZEOF rearrangedBoard
 00000221  83 E8 01				sub eax, TYPE rearrangedBoard
 00000224  A3 0000006F R			mov lastCellOnBoard, eax
					
 00000229  61				POPAD
 0000022A  C3				ret
 0000022B			copyAndRearangeBoard ENDP

				; original board is transfered, board is checked from last row to the first
 0000022B			checkboard PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_BoardPtr = i_NumRows + 4
					
 0000022B  55				push ebp
 0000022C  8B EC			mov ebp, esp
 0000022E  56				push esi
 0000022F  53				push ebx
 00000230  51				push ecx
 00000231  52				push edx

					;set eax to 1 , will be changed to -1 if the board is invalid
 00000232  B8 00000000			mov eax, 0
 00000237  8B 75 10			mov esi, [ebp + i_BoardPtr]
 0000023A  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 0000023D				checkRows:
 0000023D  8B D9				mov ebx, ecx
 0000023F  8B 4D 08				mov ecx, [ebp + i_NumCols]
 00000242					checkCols:
 00000242  80 3E 53					cmp [esi], byte PTR 'S'
							;if 'S' check cell under
 00000245  75 0B					jne notS							
 00000247  8B 55 08					mov edx, [ebp + i_NumCols]
							;if equal then there is E under S
 0000024A  80 3C 32 45					cmp [esi + edx], byte PTR 'E'		
 0000024E  74 41					je invalidBoard
 00000250  EB 0F					jmp nextCol

 00000252						notS:
							;if 'E' there can't be S above (we are checking from top to bottom)
 00000252  80 3E 45					cmp [esi], byte PTR 'E'				
 00000255  74 0A					je nextCol

							;not 'S' or 'E' so must be a digit between 1 and 40
 00000257  80 3E 01					cmp [esi], byte PTR MIN_DIGIT
 0000025A  7C 35					jl invalidBoard

 0000025C  80 3E 28					cmp [esi], byte PTR MAX_DIGIT
 0000025F  7F 30					jg invalidBoard

 00000261						nextCol:
 00000261  46							inc esi
 00000262  E2 DE						LOOP checkCols
 00000264  8B CB				mov ecx, ebx
 00000266  E2 D5				LOOP checkRows

					;check if there is an 'E' on the top row
 00000268  8B 75 10			mov esi, [ebp + i_BoardPtr]
 0000026B  8B 4D 08			mov ecx, [ebp + i_NumCols]
 0000026E				checkLastRowForE:
 0000026E  80 3E 45				cmp [esi], byte PTR 'E'
 00000271  74 1E				je invalidBoard
 00000273  46					inc	esi
 00000274  E2 F8				LOOP checkLastRowForE

					;check if there us an 'S' on the bottom row
					;get to bottom left cell	
 00000276  FF 75 10			push [ebp + i_BoardPtr]
 00000279  FF 75 0C			push [ebp + i_NumRows]
 0000027C  FF 75 08			push [ebp + i_NumCols]
 0000027F  E8 0000001C			call moveEsiToBottomLeft

 00000284				checkFirstRowForS:
						;loop trough cells of first row
 00000284  8B 4D 08				mov ecx, [ebp + i_NumCols]
 00000287					lp2:
 00000287  80 3E 53					cmp [esi], byte PTR 'S'
 0000028A  74 05					je invalidBoard
 0000028C  46						inc esi
 0000028D  E2 F8					LOOP lp2

					; if passed all checks, jump to end of procedure
 0000028F  EB 05			jmp endOfProc
					
					; if at any point an invalid cell value is found, will jump to here
 00000291				invalidBoard:
 00000291  B8 FFFFFFFF				mov eax, -1

 00000296				endOfProc:
 00000296  5A					pop edx
 00000297  59					pop ecx
 00000298  5B					pop ebx
 00000299  5E					pop esi
 0000029A  8B E5				mov esp, ebp
 0000029C  5D					pop ebp
 0000029D  C2 000C				ret 12
 000002A0			checkboard ENDP

				; set ESI to point at the bottom left cell of the given board
				; parameters (boardPtr, numRows, numCols)
 000002A0			moveEsiToBottomLeft PROC
 = 00000008				i_NumCols = 8
 = 0000000C				i_NumRows = i_NumCols + 4
 = 00000010				i_BoardPtr = i_NumRows + 4

 000002A0  55				push ebp
 000002A1  8B EC			mov ebp, esp
 000002A3  51				push ecx

 000002A4  8B 75 10			mov esi, [ebp + i_BoardPtr]
 000002A7  8B 4D 0C			mov ecx, [ebp + i_NumRows]
 000002AA  49				dec ecx
 000002AB				nextRow:
 000002AB  03 75 08				add esi, [ebp + i_NumCols]
 000002AE  E2 FB				LOOP nextRow
						
 000002B0  59				pop ecx
 000002B1  8B E5			mov esp, ebp
 000002B3  5D				pop ebp
 000002B4  C2 000C			ret 12
 000002B7			moveEsiToBottomLeft ENDP

				; parmeters (cell address, first cell address, last cell address)
 000002B7			checkCell PROC
					
 000002B7  C3				ret
 000002B8			checkCell ENDP

				; gets a pointer to a series of moves, and returns the next series
				; parameters (movesSeriesPtr, lengthOfSeries)
				; assumption: all values of the series are numbers between 1-6
 000002B8			nextmove PROC
 = 00000008				i_lengthOfSeries = 8
 = 0000000C				i_MovesSeriesPtr = i_lengthOfSeries + 4

 000002B8  55				push ebp
 000002B9  8B EC			mov ebp, esp
 000002BB  56				push esi
 000002BC  51				push ecx
 000002BD  53				push ebx

					; init EAX to 0, will be changed to 1 if series is 66...6
 000002BE  B8 00000000			mov eax, 0
 000002C3  8B 75 0C			mov esi, [ebp + i_MovesSeriesPtr]
 000002C6  8B 5D 08			mov ebx, [ebp + i_lengthOfSeries]
 000002C9  03 F3			add esi, ebx
 000002CB				incPrev:
 000002CB  4E					dec esi
 000002CC  3B 75 0C				cmp esi, [ebp + i_MovesSeriesPtr]
 000002CF  7C 0F				jl all6Series
 000002D1  80 3E 06				cmp [esi], byte PTR 6
 000002D4  7C 05				jl isLessThan6
 000002D6  C6 06 01				mov [esi], byte PTR 1
 000002D9  E2 F0				LOOP incPrev
					
 000002DB				isLessThan6:
 000002DB  80 06 01				add [esi], byte PTR 1
 000002DE  EB 07				jmp endProc

 000002E0				all6Series:
 000002E0  B8 00000001				mov eax, 1
 000002E5  EB 00				jmp endProc

 000002E7				endProc:
 000002E7  5B				pop ebx
 000002E8  59				pop ecx
 000002E9  5E				pop esi
 000002EA  8B E5			mov esp, ebp
 000002EC  5D				pop ebp
 000002ED  C2 0008			ret 8
 000002F0			nextmove ENDP

				END myMain
Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/01/17 23:26:27
ex							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000078 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkCell  . . . . . . . . . . .	P Near	 000002B7 _TEXT	Length= 00000001 Public STDCALL
checkboard . . . . . . . . . . .	P Near	 0000022B _TEXT	Length= 00000075 Public STDCALL
  checkRows  . . . . . . . . . .	L Near	 0000023D _TEXT	
  checkCols  . . . . . . . . . .	L Near	 00000242 _TEXT	
  notS . . . . . . . . . . . . .	L Near	 00000252 _TEXT	
  nextCol  . . . . . . . . . . .	L Near	 00000261 _TEXT	
  checkLastRowForE . . . . . . .	L Near	 0000026E _TEXT	
  checkFirstRowForS  . . . . . .	L Near	 00000284 _TEXT	
  lp2  . . . . . . . . . . . . .	L Near	 00000287 _TEXT	
  invalidBoard . . . . . . . . .	L Near	 00000291 _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 00000296 _TEXT	
copyAndRearangeBoard . . . . . .	P Near	 0000018E _TEXT	Length= 0000009D Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  copyOddRow . . . . . . . . . .	L Near	 000001CC _TEXT	
  copyCell1  . . . . . . . . . .	L Near	 000001DD _TEXT	
  copyEvenRow  . . . . . . . . .	L Near	 000001F7 _TEXT	
  copyCell2  . . . . . . . . . .	L Near	 000001FE _TEXT	
  endOfCopy  . . . . . . . . . .	L Near	 00000219 _TEXT	
moveEsiToBottomLeft  . . . . . .	P Near	 000002A0 _TEXT	Length= 00000017 Public STDCALL
  nextRow  . . . . . . . . . . .	L Near	 000002AB _TEXT	
myMain . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000018E Public STDCALL
  makeMove . . . . . . . . . . .	L Near	 00000047 _TEXT	
  checkCurrCell  . . . . . . . .	L Near	 00000073 _TEXT	
  digit  . . . . . . . . . . . .	L Near	 0000007D _TEXT	
  E  . . . . . . . . . . . . . .	L Near	 00000088 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 000000BB _TEXT	
  endOfMoves . . . . . . . . . .	L Near	 000000E6 _TEXT	
  foundSOnFirstRow . . . . . . .	L Near	 000000F7 _TEXT	
  foundEOnLastRow  . . . . . . .	L Near	 00000103 _TEXT	
  passedLastCellOnBoard  . . . .	L Near	 0000010F _TEXT	
  outOfMoves . . . . . . . . . .	L Near	 0000011B _TEXT	
  invalidBoard . . . . . . . . .	L Near	 00000127 _TEXT	
  gameEnded  . . . . . . . . . .	L Near	 00000138 _TEXT	
nextmove . . . . . . . . . . . .	P Near	 000002B8 _TEXT	Length= 00000038 Public STDCALL
  incPrev  . . . . . . . . . . .	L Near	 000002CB _TEXT	
  isLessThan6  . . . . . . . . .	L Near	 000002DB _TEXT	
  all6Series . . . . . . . . . .	L Near	 000002E0 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000002E7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_DIGIT  . . . . . . . . . . .	Number	 00000028h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_DIGIT  . . . . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	Byte	 00000002 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
currRow  . . . . . . . . . . . .	Byte	 0000006E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameFinStr . . . . . . . . . . .	Byte	 0000003B _DATA	
gamefin  . . . . . . . . . . . .	Byte	 00000045 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
i_BoardPtr . . . . . . . . . . .	Number	 00000010h   
i_MovesSeriesPtr . . . . . . . .	Number	 0000000Ch   
i_NumCols  . . . . . . . . . . .	Number	 00000008h   
i_NumRows  . . . . . . . . . . .	Number	 0000000Ch   
i_lengthOfSeries . . . . . . . .	Number	 00000008h   
lastCellOnBoard  . . . . . . . .	DWord	 0000006F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
moveNumStr . . . . . . . . . . .	Byte	 00000052 _DATA	
moveNum  . . . . . . . . . . . .	Word	 0000005C _DATA	
moveseries . . . . . . . . . . .	Byte	 00000073 _DATA	
moves  . . . . . . . . . . . . .	Byte	 00000012 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000018 _DATA	
nomoves  . . . . . . . . . . . .	Byte	 00000017 _DATA	
numcols  . . . . . . . . . . . .	Byte	 00000001 _DATA	
numrows  . . . . . . . . . . . .	Byte	 00000000 _DATA	
rearrangedBoard  . . . . . . . .	Byte	 0000005E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreStr . . . . . . . . . . . .	Byte	 00000046 _DATA	
score  . . . . . . . . . . . . .	DWord	 0000004E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
